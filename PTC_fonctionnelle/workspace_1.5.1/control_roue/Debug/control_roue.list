
control_roue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08007968  08007968  00017968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c70  08007c70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007c70  08007c70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c70  08007c70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000010  08007c88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08007c88  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001120f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ecf  00000000  00000000  0003124f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e21b  00000000  00000000  00034b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c73c  00000000  00000000  00052d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b833e  00000000  00000000  0005f48f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001177cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  00117848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800794c 	.word	0x0800794c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800794c 	.word	0x0800794c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <HAL_GPIO_EXTI_Callback>:
	return len;

}

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == GPIO_PIN_8){
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d143      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0x9a>
		if((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN))){
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f001 fe6d 	bl	80028c0 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x2e>

			Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000bf4:	6013      	str	r3, [r2, #0]
		}
		if (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN))){
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f001 fe5f 	bl	80028c0 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d12c      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0x9a>
			Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c10:	6013      	str	r3, [r2, #0]


			Distance = (Value2-Value1)* 0.034/2;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fc27 	bl	8000470 <__aeabi_ui2d>
 8000c22:	a313      	add	r3, pc, #76	; (adr r3, 8000c70 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fc9c 	bl	8000564 <__aeabi_dmul>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4618      	mov	r0, r3
 8000c32:	4621      	mov	r1, r4
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	f7ff fdbc 	bl	80007b8 <__aeabi_ddiv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4618      	mov	r0, r3
 8000c46:	4621      	mov	r1, r4
 8000c48:	f7ff ff4e 	bl	8000ae8 <__aeabi_d2uiz>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c52:	801a      	strh	r2, [r3, #0]


			if (detect == 0){
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0x9a>
			detect = 1;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	f3af 8000 	nop.w
 8000c70:	b020c49c 	.word	0xb020c49c
 8000c74:	3fa16872 	.word	0x3fa16872
 8000c78:	20000264 	.word	0x20000264
 8000c7c:	2000002c 	.word	0x2000002c
 8000c80:	20000030 	.word	0x20000030
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000040 	.word	0x20000040

08000c8c <slice_str>:

void slice_str(const char * str, char * buffer, size_t start, size_t end)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
    size_t j = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
    for ( size_t i = start; i <= end; ++i ) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e00c      	b.n	8000cbe <slice_str+0x32>
        buffer[j++] = str[i];
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	441a      	add	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	1c59      	adds	r1, r3, #1
 8000cae:	6179      	str	r1, [r7, #20]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	440b      	add	r3, r1
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	701a      	strb	r2, [r3, #0]
    for ( size_t i = start; i <= end; ++i ) {
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d9ee      	bls.n	8000ca4 <slice_str+0x18>
    }
    buffer[j] = 0;
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	4413      	add	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cdc:	b5b0      	push	{r4, r5, r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if (obstacle_detecte == 0){
 8000ce4:	4b7e      	ldr	r3, [pc, #504]	; (8000ee0 <HAL_UART_RxCpltCallback+0x204>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 80c9 	bne.w	8000e80 <HAL_UART_RxCpltCallback+0x1a4>
		if (start ==1){
 8000cee:	4b7d      	ldr	r3, [pc, #500]	; (8000ee4 <HAL_UART_RxCpltCallback+0x208>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d17d      	bne.n	8000df2 <HAL_UART_RxCpltCallback+0x116>
			if (strlen((char *)Receive_IHM2)!=0){
 8000cf6:	4b7c      	ldr	r3, [pc, #496]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d079      	beq.n	8000df2 <HAL_UART_RxCpltCallback+0x116>
				if (strncmp((char *) Receive_IHM2,"F@",1)==0){
 8000cfe:	4b7a      	ldr	r3, [pc, #488]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b7a      	ldr	r3, [pc, #488]	; (8000eec <HAL_UART_RxCpltCallback+0x210>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d108      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x42>
							strcpy((char *)Receive_reel2,"mogo 1:5 2:5\r");
 8000d0c:	4a78      	ldr	r2, [pc, #480]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000d0e:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <HAL_UART_RxCpltCallback+0x218>)
 8000d10:	4614      	mov	r4, r2
 8000d12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d14:	6020      	str	r0, [r4, #0]
 8000d16:	6061      	str	r1, [r4, #4]
 8000d18:	60a2      	str	r2, [r4, #8]
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	81a3      	strh	r3, [r4, #12]
						}
				if (strncmp((char *) Receive_IHM2,"S@",1)==0){
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	4b75      	ldr	r3, [pc, #468]	; (8000ef8 <HAL_UART_RxCpltCallback+0x21c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <HAL_UART_RxCpltCallback+0x5c>
							strcpy((char *)Receive_reel2,"stop\r");
 8000d2c:	4b70      	ldr	r3, [pc, #448]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000d2e:	4a73      	ldr	r2, [pc, #460]	; (8000efc <HAL_UART_RxCpltCallback+0x220>)
 8000d30:	6810      	ldr	r0, [r2, #0]
 8000d32:	6018      	str	r0, [r3, #0]
 8000d34:	8892      	ldrh	r2, [r2, #4]
 8000d36:	809a      	strh	r2, [r3, #4]
						}
				if (strncmp((char *) Receive_IHM2,"R@",1)==0){
 8000d38:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4b70      	ldr	r3, [pc, #448]	; (8000f00 <HAL_UART_RxCpltCallback+0x224>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10a      	bne.n	8000d5c <HAL_UART_RxCpltCallback+0x80>
							strcpy((char *)Receive_reel2,"mogo 1:10 2:0\r");
 8000d46:	4a6a      	ldr	r2, [pc, #424]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000d48:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <HAL_UART_RxCpltCallback+0x228>)
 8000d4a:	4614      	mov	r4, r2
 8000d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d4e:	6020      	str	r0, [r4, #0]
 8000d50:	6061      	str	r1, [r4, #4]
 8000d52:	60a2      	str	r2, [r4, #8]
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	81a2      	strh	r2, [r4, #12]
 8000d5a:	73a3      	strb	r3, [r4, #14]
						}
				if (strncmp((char *) Receive_IHM2,"L@",1)==0){
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	4b69      	ldr	r3, [pc, #420]	; (8000f08 <HAL_UART_RxCpltCallback+0x22c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <HAL_UART_RxCpltCallback+0xa4>
							strcpy((char *)Receive_reel2,"mogo 2:10 1:0\r");
 8000d6a:	4a61      	ldr	r2, [pc, #388]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000d6c:	4b67      	ldr	r3, [pc, #412]	; (8000f0c <HAL_UART_RxCpltCallback+0x230>)
 8000d6e:	4614      	mov	r4, r2
 8000d70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d72:	6020      	str	r0, [r4, #0]
 8000d74:	6061      	str	r1, [r4, #4]
 8000d76:	60a2      	str	r2, [r4, #8]
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	81a2      	strh	r2, [r4, #12]
 8000d7e:	73a3      	strb	r3, [r4, #14]
						}

				if ((strncmp((char *) Receive_IHM2,"L@",1)!=0) && (strncmp((char *) Receive_IHM2,"S@",1)!=0)  && (strncmp((char *) Receive_IHM2,"R@",1)!=0)  && (strncmp((char *) Receive_IHM2,"F@",1)!=0 )){
 8000d80:	4b59      	ldr	r3, [pc, #356]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_UART_RxCpltCallback+0x22c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d022      	beq.n	8000dd4 <HAL_UART_RxCpltCallback+0xf8>
 8000d8e:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <HAL_UART_RxCpltCallback+0x21c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d01b      	beq.n	8000dd4 <HAL_UART_RxCpltCallback+0xf8>
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <HAL_UART_RxCpltCallback+0x224>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d014      	beq.n	8000dd4 <HAL_UART_RxCpltCallback+0xf8>
 8000daa:	4b4f      	ldr	r3, [pc, #316]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_UART_RxCpltCallback+0x210>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00d      	beq.n	8000dd4 <HAL_UART_RxCpltCallback+0xf8>
					strcpy((char *)Receive_hash,(char *)Receive_IHM2);
 8000db8:	494b      	ldr	r1, [pc, #300]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000dba:	4855      	ldr	r0, [pc, #340]	; (8000f10 <HAL_UART_RxCpltCallback+0x234>)
 8000dbc:	f005 fd9a 	bl	80068f4 <strcpy>
					HAL_UART_Transmit(&huart4,Receive_hash,strlen((char *)Receive_hash),100);// Sending in normal mode
 8000dc0:	4853      	ldr	r0, [pc, #332]	; (8000f10 <HAL_UART_RxCpltCallback+0x234>)
 8000dc2:	f7ff fa0b 	bl	80001dc <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	2364      	movs	r3, #100	; 0x64
 8000dcc:	4950      	ldr	r1, [pc, #320]	; (8000f10 <HAL_UART_RxCpltCallback+0x234>)
 8000dce:	4851      	ldr	r0, [pc, #324]	; (8000f14 <HAL_UART_RxCpltCallback+0x238>)
 8000dd0:	f004 fb5e 	bl	8005490 <HAL_UART_Transmit>

				}

				HAL_UART_Transmit(&huart4,Receive_reel2,strlen((char *)Receive_reel2),100);// Sending in normal mode
 8000dd4:	4846      	ldr	r0, [pc, #280]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000dd6:	f7ff fa01 	bl	80001dc <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	2364      	movs	r3, #100	; 0x64
 8000de0:	4943      	ldr	r1, [pc, #268]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000de2:	484c      	ldr	r0, [pc, #304]	; (8000f14 <HAL_UART_RxCpltCallback+0x238>)
 8000de4:	f004 fb54 	bl	8005490 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart5, Receive_IHM2, 8);// Sending in normal mode
 8000de8:	2208      	movs	r2, #8
 8000dea:	493f      	ldr	r1, [pc, #252]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000dec:	484a      	ldr	r0, [pc, #296]	; (8000f18 <HAL_UART_RxCpltCallback+0x23c>)
 8000dee:	f004 fbe3 	bl	80055b8 <HAL_UART_Receive_IT>
			}
		}

		if (strlen((char *)Receive_IHM3)!=0){
 8000df2:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <HAL_UART_RxCpltCallback+0x240>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d042      	beq.n	8000e80 <HAL_UART_RxCpltCallback+0x1a4>
			uint8_t resTransmit[] = "command false";
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <HAL_UART_RxCpltCallback+0x244>)
 8000dfc:	f107 0420 	add.w	r4, r7, #32
 8000e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e02:	c407      	stmia	r4!, {r0, r1, r2}
 8000e04:	8023      	strh	r3, [r4, #0]
			if (strncmp((char *) Receive_IHM3,"start@",5)==0){
 8000e06:	2205      	movs	r2, #5
 8000e08:	4946      	ldr	r1, [pc, #280]	; (8000f24 <HAL_UART_RxCpltCallback+0x248>)
 8000e0a:	4844      	ldr	r0, [pc, #272]	; (8000f1c <HAL_UART_RxCpltCallback+0x240>)
 8000e0c:	f005 fd7a 	bl	8006904 <strncmp>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11f      	bne.n	8000e56 <HAL_UART_RxCpltCallback+0x17a>
				uint8_t resTransmit[] = "article#c366ef9e";
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <HAL_UART_RxCpltCallback+0x24c>)
 8000e18:	f107 040c 	add.w	r4, r7, #12
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	7023      	strb	r3, [r4, #0]
				strcpy((char *)Receive_reel3,(char *)resTransmit);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	483f      	ldr	r0, [pc, #252]	; (8000f2c <HAL_UART_RxCpltCallback+0x250>)
 8000e2e:	f005 fd61 	bl	80068f4 <strcpy>
				start = 1;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <HAL_UART_RxCpltCallback+0x208>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,Receive_reel3,strlen((char *)Receive_reel3),100);// Sending in normal mode
 8000e38:	483c      	ldr	r0, [pc, #240]	; (8000f2c <HAL_UART_RxCpltCallback+0x250>)
 8000e3a:	f7ff f9cf 	bl	80001dc <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	4939      	ldr	r1, [pc, #228]	; (8000f2c <HAL_UART_RxCpltCallback+0x250>)
 8000e46:	483a      	ldr	r0, [pc, #232]	; (8000f30 <HAL_UART_RxCpltCallback+0x254>)
 8000e48:	f004 fb22 	bl	8005490 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart1, Receive_IHM3, 20);// Sending in normal mode
 8000e4c:	2214      	movs	r2, #20
 8000e4e:	4933      	ldr	r1, [pc, #204]	; (8000f1c <HAL_UART_RxCpltCallback+0x240>)
 8000e50:	4837      	ldr	r0, [pc, #220]	; (8000f30 <HAL_UART_RxCpltCallback+0x254>)
 8000e52:	f004 fbb1 	bl	80055b8 <HAL_UART_Receive_IT>

			}
			if (strncmp((char *) Receive_IHM3,"rayon#@",6)==0){
 8000e56:	2206      	movs	r2, #6
 8000e58:	4936      	ldr	r1, [pc, #216]	; (8000f34 <HAL_UART_RxCpltCallback+0x258>)
 8000e5a:	4830      	ldr	r0, [pc, #192]	; (8000f1c <HAL_UART_RxCpltCallback+0x240>)
 8000e5c:	f005 fd52 	bl	8006904 <strncmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_UART_RxCpltCallback+0x1a4>
				slice_str((char *)Receive_IHM3, param, 7, strlen((char *)Receive_IHM));
 8000e66:	4834      	ldr	r0, [pc, #208]	; (8000f38 <HAL_UART_RxCpltCallback+0x25c>)
 8000e68:	f7ff f9b8 	bl	80001dc <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2207      	movs	r2, #7
 8000e70:	4932      	ldr	r1, [pc, #200]	; (8000f3c <HAL_UART_RxCpltCallback+0x260>)
 8000e72:	482a      	ldr	r0, [pc, #168]	; (8000f1c <HAL_UART_RxCpltCallback+0x240>)
 8000e74:	f7ff ff0a 	bl	8000c8c <slice_str>
				strcpy((char *)Receive_rayon,(char *)param);
 8000e78:	4930      	ldr	r1, [pc, #192]	; (8000f3c <HAL_UART_RxCpltCallback+0x260>)
 8000e7a:	4831      	ldr	r0, [pc, #196]	; (8000f40 <HAL_UART_RxCpltCallback+0x264>)
 8000e7c:	f005 fd3a 	bl	80068f4 <strcpy>
			}
		}
	}
	if (obstacle_detecte==2){
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_RxCpltCallback+0x204>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d127      	bne.n	8000ed8 <HAL_UART_RxCpltCallback+0x1fc>
		if (strlen((char *)Receive_IHM2)!=0){
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_UART_RxCpltCallback+0x1fc>
			if (strcmp((char *) Receive_IHM2,"S")==0){
 8000e90:	492c      	ldr	r1, [pc, #176]	; (8000f44 <HAL_UART_RxCpltCallback+0x268>)
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000e94:	f7ff f998 	bl	80001c8 <strcmp>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10a      	bne.n	8000eb4 <HAL_UART_RxCpltCallback+0x1d8>
				strcpy((char *)Receive_reel2,"mogo 1:10 2:-10\r");
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_UART_RxCpltCallback+0x26c>)
 8000ea2:	4615      	mov	r5, r2
 8000ea4:	461c      	mov	r4, r3
 8000ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea8:	6028      	str	r0, [r5, #0]
 8000eaa:	6069      	str	r1, [r5, #4]
 8000eac:	60aa      	str	r2, [r5, #8]
 8000eae:	60eb      	str	r3, [r5, #12]
 8000eb0:	7823      	ldrb	r3, [r4, #0]
 8000eb2:	742b      	strb	r3, [r5, #16]
			}
			obstacle_detecte = 0 ;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_UART_RxCpltCallback+0x204>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart4,Receive_reel2,strlen((char *)Receive_reel2),100);// Sending in normal mode
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000ebc:	f7ff f98e 	bl	80001dc <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	490a      	ldr	r1, [pc, #40]	; (8000ef0 <HAL_UART_RxCpltCallback+0x214>)
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <HAL_UART_RxCpltCallback+0x238>)
 8000eca:	f004 fae1 	bl	8005490 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart5, Receive_IHM2, 8);// Sending in normal mode
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4905      	ldr	r1, [pc, #20]	; (8000ee8 <HAL_UART_RxCpltCallback+0x20c>)
 8000ed2:	4811      	ldr	r0, [pc, #68]	; (8000f18 <HAL_UART_RxCpltCallback+0x23c>)
 8000ed4:	f004 fb70 	bl	80055b8 <HAL_UART_Receive_IT>
	}
}
}
 8000ed8:	bf00      	nop
 8000eda:	3730      	adds	r7, #48	; 0x30
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee0:	20000044 	.word	0x20000044
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	200000b0 	.word	0x200000b0
 8000eec:	08007968 	.word	0x08007968
 8000ef0:	200002c4 	.word	0x200002c4
 8000ef4:	0800796c 	.word	0x0800796c
 8000ef8:	0800797c 	.word	0x0800797c
 8000efc:	08007980 	.word	0x08007980
 8000f00:	08007988 	.word	0x08007988
 8000f04:	0800798c 	.word	0x0800798c
 8000f08:	0800799c 	.word	0x0800799c
 8000f0c:	080079a0 	.word	0x080079a0
 8000f10:	200000d0 	.word	0x200000d0
 8000f14:	200002d8 	.word	0x200002d8
 8000f18:	20000130 	.word	0x20000130
 8000f1c:	20000250 	.word	0x20000250
 8000f20:	080079d8 	.word	0x080079d8
 8000f24:	080079b0 	.word	0x080079b0
 8000f28:	080079e8 	.word	0x080079e8
 8000f2c:	20000048 	.word	0x20000048
 8000f30:	200001cc 	.word	0x200001cc
 8000f34:	080079b8 	.word	0x080079b8
 8000f38:	200002b0 	.word	0x200002b0
 8000f3c:	2000005c 	.word	0x2000005c
 8000f40:	2000035c 	.word	0x2000035c
 8000f44:	080079c0 	.word	0x080079c0
 8000f48:	080079c4 	.word	0x080079c4

08000f4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f001 fcc7 	bl	80028f0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000f6a:	bf00      	nop
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	2b09      	cmp	r3, #9
 8000f74:	d9fa      	bls.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x20>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f001 fcb6 	bl	80028f0 <HAL_GPIO_WritePin>

}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000264 	.word	0x20000264

08000f90 <alarme>:

void alarme(void){
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

	for (float i=0.000; i<=100; i+=0.03) {
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	e042      	b.n	8001024 <alarme+0x94>
		 toneVal = (uint32_t) (999 + ( 60 * sin (0.3 * i)));
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fa88 	bl	80004b4 <__aeabi_f2d>
 8000fa4:	a330      	add	r3, pc, #192	; (adr r3, 8001068 <alarme+0xd8>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff fadb 	bl	8000564 <__aeabi_dmul>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460c      	mov	r4, r1
 8000fb2:	ec44 3b17 	vmov	d7, r3, r4
 8000fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fba:	eef0 0a67 	vmov.f32	s1, s15
 8000fbe:	f005 fcb3 	bl	8006928 <sin>
 8000fc2:	ec51 0b10 	vmov	r0, r1, d0
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <alarme+0xc8>)
 8000fcc:	f7ff faca 	bl	8000564 <__aeabi_dmul>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	a31b      	add	r3, pc, #108	; (adr r3, 8001048 <alarme+0xb8>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff f90b 	bl	80001f8 <__adddf3>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f7ff fd7d 	bl	8000ae8 <__aeabi_d2uiz>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <alarme+0xcc>)
 8000ff2:	601a      	str	r2, [r3, #0]
		 htim3.Instance->CCR1 = toneVal;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <alarme+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a18      	ldr	r2, [pc, #96]	; (800105c <alarme+0xcc>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
		 HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 f93a 	bl	8002278 <HAL_Delay>
	for (float i=0.000; i<=100; i+=0.03) {
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff fa55 	bl	80004b4 <__aeabi_f2d>
 800100a:	a311      	add	r3, pc, #68	; (adr r3, 8001050 <alarme+0xc0>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff f8f2 	bl	80001f8 <__adddf3>
 8001014:	4603      	mov	r3, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4618      	mov	r0, r3
 800101a:	4621      	mov	r1, r4
 800101c:	f7ff fd84 	bl	8000b28 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	edd7 7a01 	vldr	s15, [r7, #4]
 8001028:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001064 <alarme+0xd4>
 800102c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d9b3      	bls.n	8000f9e <alarme+0xe>
	 }
	htim3.Instance->CCR1 =0;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <alarme+0xd0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	bf00      	nop
 8001048:	00000000 	.word	0x00000000
 800104c:	408f3800 	.word	0x408f3800
 8001050:	eb851eb8 	.word	0xeb851eb8
 8001054:	3f9eb851 	.word	0x3f9eb851
 8001058:	404e0000 	.word	0x404e0000
 800105c:	20000034 	.word	0x20000034
 8001060:	200000e4 	.word	0x200000e4
 8001064:	42c80000 	.word	0x42c80000
 8001068:	33333333 	.word	0x33333333
 800106c:	3fd33333 	.word	0x3fd33333

08001070 <servomoteur>:

void servomoteur(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0



		htim2.Instance->CCR1=500;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <servomoteur+0x3c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1500);
 800107e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001082:	f001 f8f9 	bl	8002278 <HAL_Delay>
		/*appelle fonction distance pour calculer la distance*/
		Distance_obstacle_gauche=Distance;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <servomoteur+0x40>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <servomoteur+0x44>)
 800108c:	801a      	strh	r2, [r3, #0]

		/*htim2.Instance->CCR1=1500;
		HAL_Delay(2000);*/
		htim2.Instance->CCR1=2500;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <servomoteur+0x3c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1500);
 8001098:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800109c:	f001 f8ec 	bl	8002278 <HAL_Delay>
		/*appelle fonction distance pour calculer la distance*/
		Distance_obstacle_droite=Distance;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <servomoteur+0x40>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <servomoteur+0x48>)
 80010a6:	801a      	strh	r2, [r3, #0]

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000370 	.word	0x20000370
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000038 	.word	0x20000038
 80010b8:	2000003a 	.word	0x2000003a

080010bc <contournement>:
			HAL_UART_Transmit(&huart4,Test,strlen((char *)Test),100);// Sending in normal mode
		}

}

void contournement(void){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b0c1      	sub	sp, #260	; 0x104
 80010c0:	af00      	add	r7, sp, #0

	if (Distance_obstacle_gauche < Distance_obstacle_droite ){
 80010c2:	4bb9      	ldr	r3, [pc, #740]	; (80013a8 <contournement+0x2ec>)
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	4bb9      	ldr	r3, [pc, #740]	; (80013ac <contournement+0x2f0>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	f080 80e5 	bcs.w	800129a <contournement+0x1de>
		uint8_t rotation_G[] = "digo 2:1000:10\r"; //Data to send
 80010d0:	4bb7      	ldr	r3, [pc, #732]	; (80013b0 <contournement+0x2f4>)
 80010d2:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80010d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,rotation_G,strlen((char *)rotation_G),500);// Sending in normal mode
 80010dc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f87b 	bl	80001dc <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80010ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f2:	48b0      	ldr	r0, [pc, #704]	; (80013b4 <contournement+0x2f8>)
 80010f4:	f004 f9cc 	bl	8005490 <HAL_UART_Transmit>


		htim2.Instance->CCR1=500;
 80010f8:	4baf      	ldr	r3, [pc, #700]	; (80013b8 <contournement+0x2fc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 8001102:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001106:	f001 f8b7 	bl	8002278 <HAL_Delay>

		while (Distance<35){
 800110a:	e012      	b.n	8001132 <contournement+0x76>
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
 800110c:	4bab      	ldr	r3, [pc, #684]	; (80013bc <contournement+0x300>)
 800110e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
 8001118:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f85d 	bl	80001dc <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	48a1      	ldr	r0, [pc, #644]	; (80013b4 <contournement+0x2f8>)
 800112e:	f004 f9af 	bl	8005490 <HAL_UART_Transmit>
		while (Distance<35){
 8001132:	4ba3      	ldr	r3, [pc, #652]	; (80013c0 <contournement+0x304>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2b22      	cmp	r3, #34	; 0x22
 8001138:	d9e8      	bls.n	800110c <contournement+0x50>
		}
		HAL_Delay(100);
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f001 f89c 	bl	8002278 <HAL_Delay>
		uint8_t test2[] = "stop\r"; //Data to send
 8001140:	4aa0      	ldr	r2, [pc, #640]	; (80013c4 <contournement+0x308>)
 8001142:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	3304      	adds	r3, #4
 800114e:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart4,test2,strlen((char *)test2),100);// Sending in normal mode
 8001150:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f841 	bl	80001dc <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	4893      	ldr	r0, [pc, #588]	; (80013b4 <contournement+0x2f8>)
 8001166:	f004 f993 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(100);
 800116a:	2064      	movs	r0, #100	; 0x64
 800116c:	f001 f884 	bl	8002278 <HAL_Delay>

		uint8_t rotation_d[] = "digo 1:1000:10\r"; //Data to send
 8001170:	4b95      	ldr	r3, [pc, #596]	; (80013c8 <contournement+0x30c>)
 8001172:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,rotation_d,strlen((char *)rotation_d),100);// Sending in normal mode
 800117c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f82b 	bl	80001dc <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	4888      	ldr	r0, [pc, #544]	; (80013b4 <contournement+0x2f8>)
 8001192:	f004 f97d 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(3000);
 8001196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800119a:	f001 f86d 	bl	8002278 <HAL_Delay>
		uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
 800119e:	4b87      	ldr	r3, [pc, #540]	; (80013bc <contournement+0x300>)
 80011a0:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80011a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
 80011aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f814 	bl	80001dc <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	487d      	ldr	r0, [pc, #500]	; (80013b4 <contournement+0x2f8>)
 80011c0:	f004 f966 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80011c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c8:	f001 f856 	bl	8002278 <HAL_Delay>


		while (Distance<35){
 80011cc:	e012      	b.n	80011f4 <contournement+0x138>
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
 80011ce:	4b7b      	ldr	r3, [pc, #492]	; (80013bc <contournement+0x300>)
 80011d0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80011d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
 80011da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe fffc 	bl	80001dc <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	4871      	ldr	r0, [pc, #452]	; (80013b4 <contournement+0x2f8>)
 80011f0:	f004 f94e 	bl	8005490 <HAL_UART_Transmit>
		while (Distance<35){
 80011f4:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <contournement+0x304>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b22      	cmp	r3, #34	; 0x22
 80011fa:	d9e8      	bls.n	80011ce <contournement+0x112>
		}
		HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f001 f83b 	bl	8002278 <HAL_Delay>

		uint8_t test3[] = "stop\r"; //Data to send
 8001202:	4a70      	ldr	r2, [pc, #448]	; (80013c4 <contournement+0x308>)
 8001204:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120c:	6018      	str	r0, [r3, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart4,test3,strlen((char *)test3),100);// Sending in normal mode
 8001212:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ffe0 	bl	80001dc <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29a      	uxth	r2, r3
 8001220:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	4863      	ldr	r0, [pc, #396]	; (80013b4 <contournement+0x2f8>)
 8001228:	f004 f932 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(100);
 800122c:	2064      	movs	r0, #100	; 0x64
 800122e:	f001 f823 	bl	8002278 <HAL_Delay>

		uint8_t rotation_d2[] = "digo 1:1000:10\r"; //Data to send
 8001232:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <contournement+0x30c>)
 8001234:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,rotation_d2,strlen((char *)rotation_d2),100);// Sending in normal mode
 800123e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001242:	4618      	mov	r0, r3
 8001244:	f7fe ffca 	bl	80001dc <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	4858      	ldr	r0, [pc, #352]	; (80013b4 <contournement+0x2f8>)
 8001254:	f004 f91c 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(3000);
 8001258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800125c:	f001 f80c 	bl	8002278 <HAL_Delay>
		obstacle_detecte=2;
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <contournement+0x310>)
 8001262:	2202      	movs	r2, #2
 8001264:	601a      	str	r2, [r3, #0]
		uint8_t tout_droit2[] = "mogo 1:5 2:5\r"; //Data to send
 8001266:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <contournement+0x314>)
 8001268:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800126c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126e:	c407      	stmia	r4!, {r0, r1, r2}
 8001270:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart4,tout_droit2,strlen((char *)tout_droit2),100);// Sending in normal mode
 8001272:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffb0 	bl	80001dc <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	484b      	ldr	r0, [pc, #300]	; (80013b4 <contournement+0x2f8>)
 8001288:	f004 f902 	bl	8005490 <HAL_UART_Transmit>
		htim2.Instance->CCR1=1500;
 800128c:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <contournement+0x2fc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001294:	635a      	str	r2, [r3, #52]	; 0x34


		return ;
 8001296:	bf00      	nop
 8001298:	e106      	b.n	80014a8 <contournement+0x3ec>


	}
	if (Distance_obstacle_droite < Distance_obstacle_gauche ){
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <contournement+0x2f0>)
 800129c:	881a      	ldrh	r2, [r3, #0]
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <contournement+0x2ec>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	f080 8100 	bcs.w	80014a8 <contournement+0x3ec>
		uint8_t rotation_G[] = "digo 1:1000:10\r"; //Data to send
 80012a8:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <contournement+0x30c>)
 80012aa:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				HAL_UART_Transmit(&huart4,rotation_G,strlen((char *)rotation_G),500);// Sending in normal mode
 80012b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7fe ff8f 	bl	80001dc <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80012c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ca:	483a      	ldr	r0, [pc, #232]	; (80013b4 <contournement+0x2f8>)
 80012cc:	f004 f8e0 	bl	8005490 <HAL_UART_Transmit>


				htim2.Instance->CCR1=500;
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <contournement+0x2fc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(3000);
 80012da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012de:	f000 ffcb 	bl	8002278 <HAL_Delay>
		while (Distance<35){
 80012e2:	e012      	b.n	800130a <contournement+0x24e>
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <contournement+0x300>)
 80012e6:	f107 0410 	add.w	r4, r7, #16
 80012ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff71 	bl	80001dc <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f107 0110 	add.w	r1, r7, #16
 8001302:	2364      	movs	r3, #100	; 0x64
 8001304:	482b      	ldr	r0, [pc, #172]	; (80013b4 <contournement+0x2f8>)
 8001306:	f004 f8c3 	bl	8005490 <HAL_UART_Transmit>
		while (Distance<35){
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <contournement+0x304>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	2b22      	cmp	r3, #34	; 0x22
 8001310:	d9e8      	bls.n	80012e4 <contournement+0x228>
		}

		HAL_Delay(100);
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f000 ffb0 	bl	8002278 <HAL_Delay>
		uint8_t test4[] = "stop\r"; //Data to send
 8001318:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <contournement+0x308>)
 800131a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001322:	6018      	str	r0, [r3, #0]
 8001324:	3304      	adds	r3, #4
 8001326:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart4,test4,strlen((char *)test4),100);// Sending in normal mode
 8001328:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff55 	bl	80001dc <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <contournement+0x2f8>)
 800133e:	f004 f8a7 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f000 ff98 	bl	8002278 <HAL_Delay>

		uint8_t rotation_d[] = "digo 2:1000:10\r"; //Data to send
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <contournement+0x2f4>)
 800134a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800134e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,rotation_d,strlen((char *)rotation_d),100);// Sending in normal mode
 8001354:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff3f 	bl	80001dc <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <contournement+0x2f8>)
 800136a:	f004 f891 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(3000);
 800136e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001372:	f000 ff81 	bl	8002278 <HAL_Delay>
		uint8_t tout_droit1[] = "mogo 1:10 2:10\r"; //Data to send
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <contournement+0x300>)
 8001378:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,tout_droit1,strlen((char *)tout_droit1),100);// Sending in normal mode
 8001382:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff28 	bl	80001dc <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001394:	2364      	movs	r3, #100	; 0x64
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <contournement+0x2f8>)
 8001398:	f004 f87a 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800139c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a0:	f000 ff6a 	bl	8002278 <HAL_Delay>

		while (Distance<35){
 80013a4:	e028      	b.n	80013f8 <contournement+0x33c>
 80013a6:	bf00      	nop
 80013a8:	20000038 	.word	0x20000038
 80013ac:	2000003a 	.word	0x2000003a
 80013b0:	08007a3c 	.word	0x08007a3c
 80013b4:	200002d8 	.word	0x200002d8
 80013b8:	20000370 	.word	0x20000370
 80013bc:	08007a14 	.word	0x08007a14
 80013c0:	20000000 	.word	0x20000000
 80013c4:	08007980 	.word	0x08007980
 80013c8:	08007a4c 	.word	0x08007a4c
 80013cc:	20000044 	.word	0x20000044
 80013d0:	0800796c 	.word	0x0800796c
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
 80013d4:	463b      	mov	r3, r7
 80013d6:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <contournement+0x3f4>)
 80013d8:	461c      	mov	r4, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
 80013e2:	463b      	mov	r3, r7
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe fef9 	bl	80001dc <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4639      	mov	r1, r7
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	4830      	ldr	r0, [pc, #192]	; (80014b4 <contournement+0x3f8>)
 80013f4:	f004 f84c 	bl	8005490 <HAL_UART_Transmit>
		while (Distance<35){
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <contournement+0x3fc>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	2b22      	cmp	r3, #34	; 0x22
 80013fe:	d9e9      	bls.n	80013d4 <contournement+0x318>
		}
		HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f000 ff39 	bl	8002278 <HAL_Delay>
		uint8_t test5[] = "stop\r"; //Data to send
 8001406:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <contournement+0x400>)
 8001408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001410:	6018      	str	r0, [r3, #0]
 8001412:	3304      	adds	r3, #4
 8001414:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart4,test5,strlen((char *)test5),100);// Sending in normal mode
 8001416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe fede 	bl	80001dc <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	4822      	ldr	r0, [pc, #136]	; (80014b4 <contournement+0x3f8>)
 800142c:	f004 f830 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(100);
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f000 ff21 	bl	8002278 <HAL_Delay>

		uint8_t rotation_d2[] = "digo 2:1000:10\r"; //Data to send
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <contournement+0x404>)
 8001438:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800143c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart4,rotation_d2,strlen((char *)rotation_d2),100);// Sending in normal mode
 8001442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe fec8 	bl	80001dc <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	4817      	ldr	r0, [pc, #92]	; (80014b4 <contournement+0x3f8>)
 8001458:	f004 f81a 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(3000);
 800145c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001460:	f000 ff0a 	bl	8002278 <HAL_Delay>

		obstacle_detecte=2;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <contournement+0x408>)
 8001466:	2202      	movs	r2, #2
 8001468:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f000 ff04 	bl	8002278 <HAL_Delay>
		uint8_t tout_droit4[] = "mogo 1:5 2:5\r"; //Data to send
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <contournement+0x40c>)
 8001472:	f107 0420 	add.w	r4, r7, #32
 8001476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001478:	c407      	stmia	r4!, {r0, r1, r2}
 800147a:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart4,tout_droit4,strlen((char *)tout_droit4),100);// Sending in normal mode
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe feab 	bl	80001dc <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	f107 0120 	add.w	r1, r7, #32
 800148e:	2364      	movs	r3, #100	; 0x64
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <contournement+0x3f8>)
 8001492:	f003 fffd 	bl	8005490 <HAL_UART_Transmit>
		HAL_Delay(100);
 8001496:	2064      	movs	r0, #100	; 0x64
 8001498:	f000 feee 	bl	8002278 <HAL_Delay>
		htim2.Instance->CCR1=1500;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <contournement+0x410>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 80014a6:	bf00      	nop
	}
}
 80014a8:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	08007a14 	.word	0x08007a14
 80014b4:	200002d8 	.word	0x200002d8
 80014b8:	20000000 	.word	0x20000000
 80014bc:	08007980 	.word	0x08007980
 80014c0:	08007a3c 	.word	0x08007a3c
 80014c4:	20000044 	.word	0x20000044
 80014c8:	0800796c 	.word	0x0800796c
 80014cc:	20000370 	.word	0x20000370

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f000 fe69 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014da:	f000 f885 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014de:	f000 fb11 	bl	8001b04 <MX_GPIO_Init>
  MX_UART4_Init();
 80014e2:	f000 fa73 	bl	80019cc <MX_UART4_Init>
  MX_TIM2_Init();
 80014e6:	f000 f935 	bl	8001754 <MX_TIM2_Init>
  MX_TIM1_Init();
 80014ea:	f000 f8df 	bl	80016ac <MX_TIM1_Init>
  MX_UART5_Init();
 80014ee:	f000 faa1 	bl	8001a34 <MX_UART5_Init>
  MX_TIM4_Init();
 80014f2:	f000 fa1d 	bl	8001930 <MX_TIM4_Init>
  MX_TIM3_Init();
 80014f6:	f000 f9a3 	bl	8001840 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80014fa:	f000 facf 	bl	8001a9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80014fe:	2100      	movs	r1, #0
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <main+0xe0>)
 8001502:	f002 fe99 	bl	8004238 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001506:	2100      	movs	r1, #0
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <main+0xe4>)
 800150a:	f002 fe95 	bl	8004238 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 800150e:	482a      	ldr	r0, [pc, #168]	; (80015b8 <main+0xe8>)
 8001510:	f002 fd64 	bl	8003fdc <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f001 f9e7 	bl	80028f0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8001522:	4826      	ldr	r0, [pc, #152]	; (80015bc <main+0xec>)
 8001524:	f002 fdbc 	bl	80040a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart4, Receive_IHM, 20);
 8001528:	2214      	movs	r2, #20
 800152a:	4925      	ldr	r1, [pc, #148]	; (80015c0 <main+0xf0>)
 800152c:	4825      	ldr	r0, [pc, #148]	; (80015c4 <main+0xf4>)
 800152e:	f004 f843 	bl	80055b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, Receive_IHM2, 8);
 8001532:	2208      	movs	r2, #8
 8001534:	4924      	ldr	r1, [pc, #144]	; (80015c8 <main+0xf8>)
 8001536:	4825      	ldr	r0, [pc, #148]	; (80015cc <main+0xfc>)
 8001538:	f004 f83e 	bl	80055b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, Receive_IHM3, 20);
 800153c:	2214      	movs	r2, #20
 800153e:	4924      	ldr	r1, [pc, #144]	; (80015d0 <main+0x100>)
 8001540:	4824      	ldr	r0, [pc, #144]	; (80015d4 <main+0x104>)
 8001542:	f004 f839 	bl	80055b8 <HAL_UART_Receive_IT>
	  {


	 /*  HAL_Delay(500);*/

		if (Distance <35){
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <main+0x108>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	2b22      	cmp	r3, #34	; 0x22
 800154c:	d82b      	bhi.n	80015a6 <main+0xd6>
			obstacle_detecte = 1;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <main+0x10c>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
			HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f000 fe8f 	bl	8002278 <HAL_Delay>
			uint8_t Test[] = "stop\r"; //Data to send
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <main+0x110>)
 800155c:	463b      	mov	r3, r7
 800155e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001562:	6018      	str	r0, [r3, #0]
 8001564:	3304      	adds	r3, #4
 8001566:	8019      	strh	r1, [r3, #0]
			HAL_UART_Transmit(&huart4,Test,strlen((char *)Test),100);// Sending in normal mode
 8001568:	463b      	mov	r3, r7
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe36 	bl	80001dc <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	4639      	mov	r1, r7
 8001576:	2364      	movs	r3, #100	; 0x64
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <main+0xf4>)
 800157a:	f003 ff89 	bl	8005490 <HAL_UART_Transmit>
			HAL_Delay(100);
 800157e:	2064      	movs	r0, #100	; 0x64
 8001580:	f000 fe7a 	bl	8002278 <HAL_Delay>
			alarme();
 8001584:	f7ff fd04 	bl	8000f90 <alarme>

		   if ((Distance <35) && (detect == 1)){
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <main+0x108>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2b22      	cmp	r3, #34	; 0x22
 800158e:	d80a      	bhi.n	80015a6 <main+0xd6>
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <main+0x114>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <main+0xd6>
				//   obstacle_detecte = 1;
					detect = 2;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <main+0x114>)
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
					servomoteur();
 800159e:	f7ff fd67 	bl	8001070 <servomoteur>
					contournement();
 80015a2:	f7ff fd8b 	bl	80010bc <contournement>
			   }
		}
		obstacle_detecte = 0;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <main+0x10c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
		if (Distance <35){
 80015ac:	e7cb      	b.n	8001546 <main+0x76>
 80015ae:	bf00      	nop
 80015b0:	20000370 	.word	0x20000370
 80015b4:	200000e4 	.word	0x200000e4
 80015b8:	20000264 	.word	0x20000264
 80015bc:	20000064 	.word	0x20000064
 80015c0:	200002b0 	.word	0x200002b0
 80015c4:	200002d8 	.word	0x200002d8
 80015c8:	200000b0 	.word	0x200000b0
 80015cc:	20000130 	.word	0x20000130
 80015d0:	20000250 	.word	0x20000250
 80015d4:	200001cc 	.word	0x200001cc
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000044 	.word	0x20000044
 80015e0:	08007980 	.word	0x08007980
 80015e4:	20000040 	.word	0x20000040

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b09e      	sub	sp, #120	; 0x78
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015f2:	2228      	movs	r2, #40	; 0x28
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 f974 	bl	80068e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800160c:	463b      	mov	r3, r7
 800160e:	223c      	movs	r2, #60	; 0x3c
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f005 f966 	bl	80068e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2301      	movs	r3, #1
 800161a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001626:	2301      	movs	r3, #1
 8001628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001632:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001634:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001638:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800163e:	4618      	mov	r0, r3
 8001640:	f001 f986 	bl	8002950 <HAL_RCC_OscConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800164a:	f000 fb49 	bl	8001ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
 8001650:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001652:	2302      	movs	r3, #2
 8001654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001664:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001668:	2102      	movs	r1, #2
 800166a:	4618      	mov	r0, r3
 800166c:	f002 f878 	bl	8003760 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001676:	f000 fb33 	bl	8001ce0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 800167a:	f241 0319 	movw	r3, #4121	; 0x1019
 800167e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fa9a 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800169e:	f000 fb1f 	bl	8001ce0 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3778      	adds	r7, #120	; 0x78
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_TIM1_Init+0xa0>)
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <MX_TIM1_Init+0xa4>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_TIM1_Init+0xa0>)
 80016d2:	2247      	movs	r2, #71	; 0x47
 80016d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM1_Init+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_TIM1_Init+0xa0>)
 80016de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_TIM1_Init+0xa0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_TIM1_Init+0xa0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_TIM1_Init+0xa0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f6:	4815      	ldr	r0, [pc, #84]	; (800174c <MX_TIM1_Init+0xa0>)
 80016f8:	f002 fc18 	bl	8003f2c <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001702:	f000 faed 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <MX_TIM1_Init+0xa0>)
 8001714:	f003 f8c4 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800171e:	f000 fadf 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_TIM1_Init+0xa0>)
 8001734:	f003 fdc0 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800173e:	f000 facf 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000264 	.word	0x20000264
 8001750:	40012c00 	.word	0x40012c00

08001754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_TIM2_Init+0xe8>)
 8001788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_TIM2_Init+0xe8>)
 8001790:	2247      	movs	r2, #71	; 0x47
 8001792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <MX_TIM2_Init+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_TIM2_Init+0xe8>)
 800179c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_TIM2_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_TIM2_Init+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_TIM2_Init+0xe8>)
 80017b0:	f002 fbbc 	bl	8003f2c <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017ba:	f000 fa91 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_TIM2_Init+0xe8>)
 80017cc:	f003 f868 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017d6:	f000 fa83 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_TIM2_Init+0xe8>)
 80017dc:	f002 fcca 	bl	8004174 <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017e6:	f000 fa7b 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_TIM2_Init+0xe8>)
 80017fa:	f003 fd5d 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001804:	f000 fa6c 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM2_Init+0xe8>)
 8001820:	f002 ff2a 	bl	8004678 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800182a:	f000 fa59 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM2_Init+0xe8>)
 8001830:	f000 fade 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000370 	.word	0x20000370

08001840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001874:	4a2d      	ldr	r2, [pc, #180]	; (800192c <MX_TIM3_Init+0xec>)
 8001876:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <MX_TIM3_Init+0xe8>)
 800187a:	2247      	movs	r2, #71	; 0x47
 800187c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800188a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <MX_TIM3_Init+0xe8>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001898:	4823      	ldr	r0, [pc, #140]	; (8001928 <MX_TIM3_Init+0xe8>)
 800189a:	f002 fb47 	bl	8003f2c <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018a4:	f000 fa1c 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	4619      	mov	r1, r3
 80018b4:	481c      	ldr	r0, [pc, #112]	; (8001928 <MX_TIM3_Init+0xe8>)
 80018b6:	f002 fff3 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018c0:	f000 fa0e 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018c4:	4818      	ldr	r0, [pc, #96]	; (8001928 <MX_TIM3_Init+0xe8>)
 80018c6:	f002 fc55 	bl	8004174 <HAL_TIM_PWM_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018d0:	f000 fa06 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_TIM3_Init+0xe8>)
 80018e4:	f003 fce8 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018ee:	f000 f9f7 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f2:	2360      	movs	r3, #96	; 0x60
 80018f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_TIM3_Init+0xe8>)
 800190a:	f002 feb5 	bl	8004678 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001914:	f000 f9e4 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <MX_TIM3_Init+0xe8>)
 800191a:	f000 fa69 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 800191e:	bf00      	nop
 8001920:	3738      	adds	r7, #56	; 0x38
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200000e4 	.word	0x200000e4
 800192c:	40000400 	.word	0x40000400

08001930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <MX_TIM4_Init+0x94>)
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <MX_TIM4_Init+0x98>)
 8001952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_TIM4_Init+0x94>)
 8001956:	2247      	movs	r2, #71	; 0x47
 8001958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_TIM4_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_TIM4_Init+0x94>)
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_TIM4_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM4_Init+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <MX_TIM4_Init+0x94>)
 8001976:	f002 fad9 	bl	8003f2c <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001980:	f000 f9ae 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_TIM4_Init+0x94>)
 8001992:	f002 ff85 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800199c:	f000 f9a0 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_TIM4_Init+0x94>)
 80019ae:	f003 fc83 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80019b8:	f000 f992 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000064 	.word	0x20000064
 80019c8:	40000800 	.word	0x40000800

080019cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_UART4_Init+0x60>)
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <MX_UART4_Init+0x64>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_UART4_Init+0x60>)
 80019d8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80019dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_UART4_Init+0x60>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_UART4_Init+0x60>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_UART4_Init+0x60>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_UART4_Init+0x60>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <MX_UART4_Init+0x60>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_UART4_Init+0x60>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_UART4_Init+0x60>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_UART4_Init+0x60>)
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_UART4_Init+0x60>)
 8001a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_UART4_Init+0x60>)
 8001a18:	f003 fcec 	bl	80053f4 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8001a22:	f000 f95d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200002d8 	.word	0x200002d8
 8001a30:	40004c00 	.word	0x40004c00

08001a34 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <MX_UART5_Init+0x64>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a72:	2210      	movs	r2, #16
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_UART5_Init+0x60>)
 8001a80:	f003 fcb8 	bl	80053f4 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8001a8a:	f000 f929 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000130 	.word	0x20000130
 8001a98:	40005000 	.word	0x40005000

08001a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <MX_USART1_UART_Init+0x64>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001aa8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ada:	2210      	movs	r2, #16
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART1_UART_Init+0x60>)
 8001ae8:	f003 fc84 	bl	80053f4 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001af2:	f000 f8f5 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001cc 	.word	0x200001cc
 8001b00:	40013800 	.word	0x40013800

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a6d      	ldr	r2, [pc, #436]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4a:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a61      	ldr	r2, [pc, #388]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b54:	6153      	str	r3, [r2, #20]
 8001b56:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4a5b      	ldr	r2, [pc, #364]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	6153      	str	r3, [r2, #20]
 8001b6e:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a55      	ldr	r2, [pc, #340]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6153      	str	r3, [r2, #20]
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <MX_GPIO_Init+0x1d0>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001baa:	2200      	movs	r2, #0
 8001bac:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001bb0:	4849      	ldr	r0, [pc, #292]	; (8001cd8 <MX_GPIO_Init+0x1d4>)
 8001bb2:	f000 fe9d 	bl	80028f0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f000 fe96 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001bc4:	2337      	movs	r3, #55	; 0x37
 8001bc6:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	483f      	ldr	r0, [pc, #252]	; (8001cd8 <MX_GPIO_Init+0x1d4>)
 8001bda:	f000 fcf7 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001bde:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001be2:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4838      	ldr	r0, [pc, #224]	; (8001cd8 <MX_GPIO_Init+0x1d4>)
 8001bf8:	f000 fce8 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f000 fcdb 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001c16:	23e0      	movs	r3, #224	; 0xe0
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f000 fcca 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c3e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f000 fcbb 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f000 fcab 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001c76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001c88:	230e      	movs	r3, #14
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f000 fc99 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9e:	2312      	movs	r3, #18
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001caa:	2304      	movs	r3, #4
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <MX_GPIO_Init+0x1d8>)
 8001cb6:	f000 fc89 	bl	80025cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2017      	movs	r0, #23
 8001cc0:	f000 fbd7 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cc4:	2017      	movs	r0, #23
 8001cc6:	f000 fbf0 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	; 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48001000 	.word	0x48001000
 8001cdc:	48000400 	.word	0x48000400

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <Error_Handler+0x6>

08001ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_MspInit+0x44>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_MspInit+0x44>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_MspInit+0x44>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_MspInit+0x44>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_MspInit+0x44>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_MspInit+0x44>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f000 fb9c 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10c      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d5a:	e03c      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d10c      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
}
 8001d7e:	e02a      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10c      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	e018      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_TIM_Base_MspInit+0xbc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d113      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201e      	movs	r0, #30
 8001dcc:	f000 fb51 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dd0:	201e      	movs	r0, #30
 8001dd2:	f000 fb6a 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d11e      	bne.n	8001e50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_TIM_MspPostInit+0xac>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_TIM_MspPostInit+0xac>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	6153      	str	r3, [r2, #20]
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_TIM_MspPostInit+0xac>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4a:	f000 fbbf 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e4e:	e020      	b.n	8001e92 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_TIM_MspPostInit+0xb0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11b      	bne.n	8001e92 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_TIM_MspPostInit+0xac>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_TIM_MspPostInit+0xac>)
 8001e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e64:	6153      	str	r3, [r2, #20]
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_TIM_MspPostInit+0xac>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e72:	2340      	movs	r3, #64	; 0x40
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e82:	2302      	movs	r3, #2
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e8e:	f000 fb9d 	bl	80025cc <HAL_GPIO_Init>
}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	48000800 	.word	0x48000800

08001ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d142      	bne.n	8001f50 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eca:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4a61      	ldr	r2, [pc, #388]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eec:	6153      	str	r3, [r2, #20]
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f00:	2312      	movs	r3, #18
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4856      	ldr	r0, [pc, #344]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f18:	f000 fb58 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	484d      	ldr	r0, [pc, #308]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f3a:	f000 fb47 	bl	80025cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2034      	movs	r0, #52	; 0x34
 8001f44:	f000 fa95 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f48:	2034      	movs	r0, #52	; 0x34
 8001f4a:	f000 faae 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f4e:	e087      	b.n	8002060 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==UART5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a47      	ldr	r2, [pc, #284]	; (8002074 <HAL_UART_MspInit+0x1cc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d14d      	bne.n	8001ff6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a43      	ldr	r2, [pc, #268]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a37      	ldr	r2, [pc, #220]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	4b35      	ldr	r3, [pc, #212]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482c      	ldr	r0, [pc, #176]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001fc0:	f000 fb04 	bl	80025cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4826      	ldr	r0, [pc, #152]	; (8002078 <HAL_UART_MspInit+0x1d0>)
 8001fe0:	f000 faf4 	bl	80025cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2035      	movs	r0, #53	; 0x35
 8001fea:	f000 fa42 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fee:	2035      	movs	r0, #53	; 0x35
 8001ff0:	f000 fa5b 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8001ff4:	e034      	b.n	8002060 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a20      	ldr	r2, [pc, #128]	; (800207c <HAL_UART_MspInit+0x1d4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d12f      	bne.n	8002060 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_UART_MspInit+0x1c4>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_UART_MspInit+0x1c4>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_UART_MspInit+0x1c4>)
 800201e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002022:	6153      	str	r3, [r2, #20]
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002030:	2330      	movs	r3, #48	; 0x30
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002040:	2307      	movs	r3, #7
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	4809      	ldr	r0, [pc, #36]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 800204c:	f000 fabe 	bl	80025cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	2025      	movs	r0, #37	; 0x25
 8002056:	f000 fa0c 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800205a:	2025      	movs	r0, #37	; 0x25
 800205c:	f000 fa25 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8002060:	bf00      	nop
 8002062:	3738      	adds	r7, #56	; 0x38
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40004c00 	.word	0x40004c00
 800206c:	40021000 	.word	0x40021000
 8002070:	48000800 	.word	0x48000800
 8002074:	40005000 	.word	0x40005000
 8002078:	48000c00 	.word	0x48000c00
 800207c:	40013800 	.word	0x40013800

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 f8b4 	bl	8002238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020dc:	f000 fc20 	bl	8002920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM4_IRQHandler+0x10>)
 80020ea:	f002 f9a5 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000064 	.word	0x20000064

080020f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <USART1_IRQHandler+0x10>)
 80020fe:	f003 faa9 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200001cc 	.word	0x200001cc

0800210c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <UART4_IRQHandler+0x10>)
 8002112:	f003 fa9f 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200002d8 	.word	0x200002d8

08002120 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <UART5_IRQHandler+0x10>)
 8002126:	f003 fa95 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000130 	.word	0x20000130

08002134 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <SystemInit+0x20>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <SystemInit+0x20>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002190 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480d      	ldr	r0, [pc, #52]	; (8002194 <LoopForever+0x6>)
  ldr r1, =_edata
 800215e:	490e      	ldr	r1, [pc, #56]	; (8002198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <LoopForever+0xe>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002174:	4c0b      	ldr	r4, [pc, #44]	; (80021a4 <LoopForever+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002182:	f7ff ffd7 	bl	8002134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002186:	f004 fb89 	bl	800689c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218a:	f7ff f9a1 	bl	80014d0 <main>

0800218e <LoopForever>:

LoopForever:
    b LoopForever
 800218e:	e7fe      	b.n	800218e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002190:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800219c:	08007c78 	.word	0x08007c78
  ldr r2, =_sbss
 80021a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80021a4:	200003c4 	.word	0x200003c4

080021a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC1_2_IRQHandler>
	...

080021ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_Init+0x28>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_Init+0x28>)
 80021b6:	f043 0310 	orr.w	r3, r3, #16
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f000 f94d 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 f808 	bl	80021d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c8:	f7ff fd8e 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x54>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_InitTick+0x58>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f965 	bl	80024c6 <HAL_SYSTICK_Config>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e00e      	b.n	8002224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d80a      	bhi.n	8002222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220c:	2200      	movs	r2, #0
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f000 f92d 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <HAL_InitTick+0x5c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000004 	.word	0x20000004
 8002230:	2000000c 	.word	0x2000000c
 8002234:	20000008 	.word	0x20000008

08002238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x20>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_IncTick+0x24>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4413      	add	r3, r2
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_IncTick+0x24>)
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	2000000c 	.word	0x2000000c
 800225c:	200003c0 	.word	0x200003c0

08002260 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return uwTick;  
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_GetTick+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200003c0 	.word	0x200003c0

08002278 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff ffee 	bl	8002260 <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d005      	beq.n	800229e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_Delay+0x40>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800229e:	bf00      	nop
 80022a0:	f7ff ffde 	bl	8002260 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f7      	bhi.n	80022a0 <HAL_Delay+0x28>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000000c 	.word	0x2000000c

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2204      	movs	r2, #4
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e020      	b.n	8002544 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020e 	bic.w	r2, r2, #14
 8002510:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002562:	2b02      	cmp	r3, #2
 8002564:	d005      	beq.n	8002572 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e027      	b.n	80025c2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020e 	bic.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
    } 
  }
  return status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	e154      	b.n	8002886 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8146 	beq.w	8002880 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0201 	and.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b03      	cmp	r3, #3
 8002678:	d017      	beq.n	80026aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d123      	bne.n	80026fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a0 	beq.w	8002880 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002740:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <HAL_GPIO_Init+0x2d8>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a57      	ldr	r2, [pc, #348]	; (80028a4 <HAL_GPIO_Init+0x2d8>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <HAL_GPIO_Init+0x2d8>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002758:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <HAL_GPIO_Init+0x2dc>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002782:	d019      	beq.n	80027b8 <HAL_GPIO_Init+0x1ec>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a49      	ldr	r2, [pc, #292]	; (80028ac <HAL_GPIO_Init+0x2e0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <HAL_GPIO_Init+0x1e8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a48      	ldr	r2, [pc, #288]	; (80028b0 <HAL_GPIO_Init+0x2e4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00d      	beq.n	80027b0 <HAL_GPIO_Init+0x1e4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <HAL_GPIO_Init+0x2e8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <HAL_GPIO_Init+0x1e0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <HAL_GPIO_Init+0x2ec>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_GPIO_Init+0x1dc>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e008      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027a8:	2305      	movs	r3, #5
 80027aa:	e006      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e004      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e002      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027b8:	2300      	movs	r3, #0
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	f002 0203 	and.w	r2, r2, #3
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	4093      	lsls	r3, r2
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ca:	4937      	ldr	r1, [pc, #220]	; (80028a8 <HAL_GPIO_Init+0x2dc>)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027fc:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f aea3 	bne.w	80025dc <HAL_GPIO_Init+0x10>
  }
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40010000 	.word	0x40010000
 80028ac:	48000400 	.word	0x48000400
 80028b0:	48000800 	.word	0x48000800
 80028b4:	48000c00 	.word	0x48000c00
 80028b8:	48001000 	.word	0x48001000
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e001      	b.n	80028e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800290c:	e002      	b.n	8002914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe f942 	bl	8000bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40010400 	.word	0x40010400

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002956:	af00      	add	r7, sp, #0
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f000 bef4 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 816a 	beq.w	8002c4e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800297a:	4bb3      	ldr	r3, [pc, #716]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d00c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002986:	4bb0      	ldr	r3, [pc, #704]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d159      	bne.n	8002a46 <HAL_RCC_OscConfig+0xf6>
 8002992:	4bad      	ldr	r3, [pc, #692]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d152      	bne.n	8002a46 <HAL_RCC_OscConfig+0xf6>
 80029a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_OscConfig+0x82>
 80029cc:	4b9e      	ldr	r3, [pc, #632]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0xae>
 80029d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029fa:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 810c 	beq.w	8002c4c <HAL_RCC_OscConfig+0x2fc>
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 8106 	bne.w	8002c4c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f000 be86 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x110>
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e030      	b.n	8002ac2 <HAL_RCC_OscConfig+0x172>
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x134>
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a76      	ldr	r2, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a73      	ldr	r2, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x172>
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x15a>
 8002a90:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x172>
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a66      	ldr	r2, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a63      	ldr	r2, [pc, #396]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ac2:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f023 020f 	bic.w	r2, r3, #15
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	495d      	ldr	r1, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d059      	beq.n	8002b94 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff fbbe 	bl	8002260 <HAL_GetTick>
 8002ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aea:	f7ff fbb9 	bl	8002260 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d902      	bls.n	8002b00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	f000 be29 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0x1e2>
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x20e>
 8002b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b4e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b72:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ab      	beq.n	8002aea <HAL_RCC_OscConfig+0x19a>
 8002b92:	e05c      	b.n	8002c4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fb64 	bl	8002260 <HAL_GetTick>
 8002b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9e:	f7ff fb5f 	bl	8002260 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d902      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	f000 bdcf 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_OscConfig+0x296>
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x2c2>
 8002be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c02:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c26:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ab      	bne.n	8002b9e <HAL_RCC_OscConfig+0x24e>
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_OscConfig+0x2fe>
 8002c48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 816f 	beq.w	8002f3c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c5e:	4bd0      	ldr	r3, [pc, #832]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c6a:	4bcd      	ldr	r3, [pc, #820]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d16c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x400>
 8002c76:	4bca      	ldr	r3, [pc, #808]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d166      	bne.n	8002d50 <HAL_RCC_OscConfig+0x400>
 8002c82:	2302      	movs	r3, #2
 8002c84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x362>
 8002cac:	4bbc      	ldr	r3, [pc, #752]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	e013      	b.n	8002cda <HAL_RCC_OscConfig+0x38a>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cd6:	4bb2      	ldr	r3, [pc, #712]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ce0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f042 0220 	orr.w	r2, r2, #32
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f002 021f 	and.w	r2, r2, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3cc>
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f000 bd1b 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4ba0      	ldr	r3, [pc, #640]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	21f8      	movs	r1, #248	; 0xf8
 8002d2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d34:	fa91 f1a1 	rbit	r1, r1
 8002d38:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d40:	fab1 f181 	clz	r1, r1
 8002d44:	b2c9      	uxtb	r1, r1
 8002d46:	408b      	lsls	r3, r1
 8002d48:	4995      	ldr	r1, [pc, #596]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e0f5      	b.n	8002f3c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8085 	beq.w	8002e66 <HAL_RCC_OscConfig+0x516>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2301      	movs	r3, #1
 8002d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fa6a 	bl	8002260 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7ff fa65 	bl	8002260 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	f000 bcd5 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002da8:	2302      	movs	r3, #2
 8002daa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x488>
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e013      	b.n	8002e00 <HAL_RCC_OscConfig+0x4b0>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002df0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2202      	movs	r2, #2
 8002e02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e0a:	fa92 f2a2 	rbit	r2, r2
 8002e0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f042 0220 	orr.w	r2, r2, #32
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f002 021f 	and.w	r2, r2, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0af      	beq.n	8002d92 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	21f8      	movs	r1, #248	; 0xf8
 8002e42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e4a:	fa91 f1a1 	rbit	r1, r1
 8002e4e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e52:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e56:	fab1 f181 	clz	r1, r1
 8002e5a:	b2c9      	uxtb	r1, r1
 8002e5c:	408b      	lsls	r3, r1
 8002e5e:	4950      	ldr	r1, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e06a      	b.n	8002f3c <HAL_RCC_OscConfig+0x5ec>
 8002e66:	2301      	movs	r3, #1
 8002e68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7ff f9e5 	bl	8002260 <HAL_GetTick>
 8002e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7ff f9e0 	bl	8002260 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d902      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f000 bc50 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x592>
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	e013      	b.n	8002f0a <HAL_RCC_OscConfig+0x5ba>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002efa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f14:	fa92 f2a2 	rbit	r2, r2
 8002f18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f20:	fab2 f282 	clz	r2, r2
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f042 0220 	orr.w	r2, r2, #32
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f002 021f 	and.w	r2, r2, #31
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f202 	lsl.w	r2, r1, r2
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1af      	bne.n	8002e9c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80da 	beq.w	8003100 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d069      	beq.n	800302a <HAL_RCC_OscConfig+0x6da>
 8002f56:	2301      	movs	r3, #1
 8002f58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x654>)
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f80:	f7ff f96e 	bl	8002260 <HAL_GetTick>
 8002f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7ff f969 	bl	8002260 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d906      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e3d9      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	10908120 	.word	0x10908120
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8002fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f1a3 	rbit	r1, r3
 8003000:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003004:	6019      	str	r1, [r3, #0]
  return result;
 8003006:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0b0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x63a>
 8003028:	e06a      	b.n	8003100 <HAL_RCC_OscConfig+0x7b0>
 800302a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003040:	601a      	str	r2, [r3, #0]
  return result;
 8003042:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003046:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	4b8c      	ldr	r3, [pc, #560]	; (8003284 <HAL_RCC_OscConfig+0x934>)
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	461a      	mov	r2, r3
 8003058:	2300      	movs	r3, #0
 800305a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7ff f900 	bl	8002260 <HAL_GetTick>
 8003060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	e009      	b.n	800307a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003066:	f7ff f8fb 	bl	8002260 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e36b      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 800307a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800307e:	2202      	movs	r2, #2
 8003080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003096:	2202      	movs	r2, #2
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80030c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030ca:	2102      	movs	r1, #2
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f1a3 	rbit	r1, r3
 80030d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030dc:	6019      	str	r1, [r3, #0]
  return result;
 80030de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1b2      	bne.n	8003066 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8158 	beq.w	80033c0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b57      	ldr	r3, [pc, #348]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	61d3      	str	r3, [r2, #28]
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11a      	bne.n	800318a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4b      	ldr	r2, [pc, #300]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003160:	f7ff f87e 	bl	8002260 <HAL_GetTick>
 8003164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e009      	b.n	800317e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7ff f879 	bl	8002260 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e2e9      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ef      	beq.n	800316a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x852>
 8003194:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a39      	ldr	r2, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	e02f      	b.n	8003202 <HAL_RCC_OscConfig+0x8b2>
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x876>
 80031ac:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a33      	ldr	r2, [pc, #204]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e01d      	b.n	8003202 <HAL_RCC_OscConfig+0x8b2>
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d10c      	bne.n	80031ea <HAL_RCC_OscConfig+0x89a>
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6213      	str	r3, [r2, #32]
 80031e8:	e00b      	b.n	8003202 <HAL_RCC_OscConfig+0x8b2>
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a24      	ldr	r2, [pc, #144]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d06b      	beq.n	80032e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7ff f828 	bl	8002260 <HAL_GetTick>
 8003210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7ff f823 	bl	8002260 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e291      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 800322e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800324a:	2202      	movs	r2, #2
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f2a3 	rbit	r2, r3
 8003258:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800325c:	601a      	str	r2, [r3, #0]
  return result;
 800325e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003262:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d109      	bne.n	800328c <HAL_RCC_OscConfig+0x93c>
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	e014      	b.n	80032a8 <HAL_RCC_OscConfig+0x958>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	10908120 	.word	0x10908120
 8003288:	40007000 	.word	0x40007000
 800328c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003290:	2202      	movs	r2, #2
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4bbb      	ldr	r3, [pc, #748]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032ac:	2102      	movs	r1, #2
 80032ae:	6011      	str	r1, [r2, #0]
 80032b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	fa92 f1a2 	rbit	r1, r2
 80032ba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032be:	6011      	str	r1, [r2, #0]
  return result;
 80032c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d099      	beq.n	8003216 <HAL_RCC_OscConfig+0x8c6>
 80032e2:	e063      	b.n	80033ac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fe ffbc 	bl	8002260 <HAL_GetTick>
 80032e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fe ffb7 	bl	8002260 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e225      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8003306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800330a:	2202      	movs	r2, #2
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003322:	2202      	movs	r2, #2
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003334:	601a      	str	r2, [r3, #0]
  return result;
 8003336:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800333a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d102      	bne.n	8003356 <HAL_RCC_OscConfig+0xa06>
 8003350:	4b90      	ldr	r3, [pc, #576]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	e00d      	b.n	8003372 <HAL_RCC_OscConfig+0xa22>
 8003356:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4b89      	ldr	r3, [pc, #548]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003376:	2102      	movs	r1, #2
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	fa92 f1a2 	rbit	r1, r2
 8003384:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003388:	6011      	str	r1, [r2, #0]
  return result;
 800338a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	fab2 f282 	clz	r2, r2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f002 021f 	and.w	r2, r2, #31
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1a0      	bne.n	80032ee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b4:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a76      	ldr	r2, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 81c2 	beq.w	8003750 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	4b71      	ldr	r3, [pc, #452]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	f000 819c 	beq.w	8003712 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f040 8114 	bne.w	800360e <HAL_RCC_OscConfig+0xcbe>
 80033e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033fe:	601a      	str	r2, [r3, #0]
  return result;
 8003400:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003404:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003410:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	461a      	mov	r2, r3
 8003418:	2300      	movs	r3, #0
 800341a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe ff20 	bl	8002260 <HAL_GetTick>
 8003420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003424:	e009      	b.n	800343a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe ff1b 	bl	8002260 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e18b      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 800343a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800343e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003452:	601a      	str	r2, [r3, #0]
  return result;
 8003454:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003458:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_RCC_OscConfig+0xb24>
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	e01b      	b.n	80034ac <HAL_RCC_OscConfig+0xb5c>
 8003474:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034b4:	6011      	str	r1, [r2, #0]
 80034b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	fa92 f1a2 	rbit	r1, r2
 80034c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034c4:	6011      	str	r1, [r2, #0]
  return result;
 80034c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	fab2 f282 	clz	r2, r2
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f042 0220 	orr.w	r2, r2, #32
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	f002 021f 	and.w	r2, r2, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d19e      	bne.n	8003426 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	4925      	ldr	r1, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
 8003504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800351c:	601a      	str	r2, [r3, #0]
  return result;
 800351e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003522:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800352e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	461a      	mov	r2, r3
 8003536:	2301      	movs	r3, #1
 8003538:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fe91 	bl	8002260 <HAL_GetTick>
 800353e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003542:	e009      	b.n	8003558 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe fe8c 	bl	8002260 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0fc      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8003558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800355c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003570:	601a      	str	r2, [r3, #0]
  return result;
 8003572:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003576:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0xc48>
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	e01e      	b.n	80035d0 <HAL_RCC_OscConfig+0xc80>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035d8:	6011      	str	r1, [r2, #0]
 80035da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	fa92 f1a2 	rbit	r1, r2
 80035e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035e8:	6011      	str	r1, [r2, #0]
  return result;
 80035ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f002 021f 	and.w	r2, r2, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d09b      	beq.n	8003544 <HAL_RCC_OscConfig+0xbf4>
 800360c:	e0a0      	b.n	8003750 <HAL_RCC_OscConfig+0xe00>
 800360e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f2a3 	rbit	r2, r3
 8003622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003626:	601a      	str	r2, [r3, #0]
  return result;
 8003628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	2300      	movs	r3, #0
 8003642:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe fe0c 	bl	8002260 <HAL_GetTick>
 8003648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	e009      	b.n	8003662 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fe fe07 	bl	8002260 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e077      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8003662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003680:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_RCC_OscConfig+0xd4c>
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e01b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd84>
 800369c:	f107 0320 	add.w	r3, r7, #32
 80036a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f107 0320 	add.w	r3, r7, #32
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f107 031c 	add.w	r3, r7, #28
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f107 0318 	add.w	r3, r7, #24
 80036ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	fa93 f2a3 	rbit	r2, r3
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f107 0210 	add.w	r2, r7, #16
 80036d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	f107 0210 	add.w	r2, r7, #16
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fa92 f1a2 	rbit	r1, r2
 80036e8:	f107 020c 	add.w	r2, r7, #12
 80036ec:	6011      	str	r1, [r2, #0]
  return result;
 80036ee:	f107 020c 	add.w	r2, r7, #12
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d19e      	bne.n	800364e <HAL_RCC_OscConfig+0xcfe>
 8003710:	e01e      	b.n	8003750 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e018      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003728:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800372c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	429a      	cmp	r2, r3
 8003738:	d108      	bne.n	800374c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800373a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800373e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09e      	sub	sp, #120	; 0x78
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e162      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b90      	ldr	r3, [pc, #576]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b8d      	ldr	r3, [pc, #564]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	498b      	ldr	r1, [pc, #556]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e14a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	497f      	ldr	r1, [pc, #508]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80dc 	beq.w	800398c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d13c      	bne.n	8003856 <HAL_RCC_ClockConfig+0xf6>
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_ClockConfig+0xa6>
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	e00f      	b.n	8003826 <HAL_RCC_ClockConfig+0xc6>
 8003806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	667b      	str	r3, [r7, #100]	; 0x64
 8003814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003818:	663b      	str	r3, [r7, #96]	; 0x60
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382a:	65ba      	str	r2, [r7, #88]	; 0x58
 800382c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f002 021f 	and.w	r2, r2, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d17b      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0f3      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d13c      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x178>
 800385e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003862:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_ClockConfig+0x128>
 8003882:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e00f      	b.n	80038a8 <HAL_RCC_ClockConfig+0x148>
 8003888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b0:	fa92 f2a2 	rbit	r2, r2
 80038b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d13a      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b2      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
 80038d8:	2302      	movs	r3, #2
 80038da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1a0>
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e00d      	b.n	800391c <HAL_RCC_ClockConfig+0x1bc>
 8003900:	2302      	movs	r3, #2
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	2302      	movs	r3, #2
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2202      	movs	r2, #2
 800391e:	61ba      	str	r2, [r7, #24]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	fa92 f2a2 	rbit	r2, r2
 8003926:	617a      	str	r2, [r7, #20]
  return result;
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e079      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	491a      	ldr	r1, [pc, #104]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395c:	f7fe fc80 	bl	8002260 <HAL_GetTick>
 8003960:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fc7c 	bl	8002260 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e061      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d214      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e040      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	491a      	ldr	r1, [pc, #104]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4912      	ldr	r1, [pc, #72]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a02:	f000 f829 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	22f0      	movs	r2, #240	; 0xf0
 8003a12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	40d3      	lsrs	r3, r2
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x2ec>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_RCC_ClockConfig+0x2f0>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCC_ClockConfig+0x2f4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fbce 	bl	80021d8 <HAL_InitTick>
  
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3778      	adds	r7, #120	; 0x78
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08007a5c 	.word	0x08007a5c
 8003a50:	20000004 	.word	0x20000004
 8003a54:	20000008 	.word	0x20000008

08003a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b08b      	sub	sp, #44	; 0x2c
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x30>
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x36>
 8003a86:	e03c      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a8a:	623b      	str	r3, [r7, #32]
      break;
 8003a8c:	e03c      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	607a      	str	r2, [r7, #4]
  return result;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	40d3      	lsrs	r3, r2
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	220f      	movs	r2, #15
 8003abc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	fa92 f2a2 	rbit	r2, r2
 8003ac4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	fab2 f282 	clz	r2, r2
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	40d3      	lsrs	r3, r2
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ae0:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	e004      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	623b      	str	r3, [r7, #32]
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b04:	623b      	str	r3, [r7, #32]
      break;
 8003b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	372c      	adds	r7, #44	; 0x2c
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	007a1200 	.word	0x007a1200
 8003b20:	08007a74 	.word	0x08007a74
 8003b24:	08007a84 	.word	0x08007a84
 8003b28:	003d0900 	.word	0x003d0900

08003b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000004 	.word	0x20000004

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b4a:	f7ff ffef 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b4e:	4601      	mov	r1, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	fa92 f2a2 	rbit	r2, r2
 8003b64:	603a      	str	r2, [r7, #0]
  return result;
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	40d3      	lsrs	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08007a6c 	.word	0x08007a6c

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b8e:	f7ff ffcd 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ba0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	fa92 f2a2 	rbit	r2, r2
 8003ba8:	603a      	str	r2, [r7, #0]
  return result;
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	fab2 f282 	clz	r2, r2
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	40d3      	lsrs	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08007a6c 	.word	0x08007a6c

08003bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b092      	sub	sp, #72	; 0x48
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80d4 	beq.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
 8003c08:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a41      	ldr	r2, [pc, #260]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fb15 	bl	8002260 <HAL_GetTick>
 8003c36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7fe fb11 	bl	8002260 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e169      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c58:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8084 	beq.w	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d07c      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c78:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04b      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fe fac1 	bl	8002260 <HAL_GetTick>
 8003cde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fabd 	bl	8002260 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e113      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	2302      	movs	r3, #2
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	61fb      	str	r3, [r7, #28]
  return result;
 8003d10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d108      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d26:	4b01      	ldr	r3, [pc, #4]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	e00d      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	10908100 	.word	0x10908100
 8003d38:	2302      	movs	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	4b78      	ldr	r3, [pc, #480]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2202      	movs	r2, #2
 8003d4a:	613a      	str	r2, [r7, #16]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	fa92 f2a2 	rbit	r2, r2
 8003d52:	60fa      	str	r2, [r7, #12]
  return result;
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	fab2 f282 	clz	r2, r2
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	f002 021f 	and.w	r2, r2, #31
 8003d66:	2101      	movs	r1, #1
 8003d68:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0b7      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d72:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	496a      	ldr	r1, [pc, #424]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a65      	ldr	r2, [pc, #404]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da4:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	495d      	ldr	r1, [pc, #372]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4956      	ldr	r1, [pc, #344]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de0:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	494e      	ldr	r1, [pc, #312]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4947      	ldr	r1, [pc, #284]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e1c:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	493f      	ldr	r1, [pc, #252]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f023 0220 	bic.w	r2, r3, #32
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4938      	ldr	r1, [pc, #224]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	4930      	ldr	r1, [pc, #192]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e76:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	4929      	ldr	r1, [pc, #164]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e94:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4921      	ldr	r1, [pc, #132]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	491a      	ldr	r1, [pc, #104]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ed0:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	4912      	ldr	r1, [pc, #72]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	490b      	ldr	r1, [pc, #44]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3748      	adds	r7, #72	; 0x48
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000

08003f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e049      	b.n	8003fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd feec 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f000 fd7e 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e042      	b.n	800407a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a21      	ldr	r2, [pc, #132]	; (8004088 <HAL_TIM_Base_Start+0xac>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_TIM_Base_Start+0x5c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d013      	beq.n	8004038 <HAL_TIM_Base_Start+0x5c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_TIM_Base_Start+0xb0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_TIM_Base_Start+0x5c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_TIM_Base_Start+0xb4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_TIM_Base_Start+0x5c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_TIM_Base_Start+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_TIM_Base_Start+0x5c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_Base_Start+0xbc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d115      	bne.n	8004064 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_TIM_Base_Start+0xc0>)
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b06      	cmp	r3, #6
 8004048:	d015      	beq.n	8004076 <HAL_TIM_Base_Start+0x9a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d011      	beq.n	8004076 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004062:	e008      	b.n	8004076 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e000      	b.n	8004078 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40013400 	.word	0x40013400
 8004098:	40014000 	.word	0x40014000
 800409c:	00010007 	.word	0x00010007

080040a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d001      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e04a      	b.n	800414e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a21      	ldr	r2, [pc, #132]	; (800415c <HAL_TIM_Base_Start_IT+0xbc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d018      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x6c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e2:	d013      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_TIM_Base_Start_IT+0xc0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00e      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <HAL_TIM_Base_Start_IT+0xc4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d009      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x6c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_TIM_Base_Start_IT+0xc8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x6c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <HAL_TIM_Base_Start_IT+0xcc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d115      	bne.n	8004138 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_TIM_Base_Start_IT+0xd0>)
 8004114:	4013      	ands	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b06      	cmp	r3, #6
 800411c:	d015      	beq.n	800414a <HAL_TIM_Base_Start_IT+0xaa>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d011      	beq.n	800414a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	e008      	b.n	800414a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e000      	b.n	800414c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40013400 	.word	0x40013400
 800416c:	40014000 	.word	0x40014000
 8004170:	00010007 	.word	0x00010007

08004174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e049      	b.n	800421a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f841 	bl	8004222 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 fc5a 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_TIM_PWM_Start+0x24>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e03c      	b.n	80042d6 <HAL_TIM_PWM_Start+0x9e>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d109      	bne.n	8004276 <HAL_TIM_PWM_Start+0x3e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e02f      	b.n	80042d6 <HAL_TIM_PWM_Start+0x9e>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d109      	bne.n	8004290 <HAL_TIM_PWM_Start+0x58>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e022      	b.n	80042d6 <HAL_TIM_PWM_Start+0x9e>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d109      	bne.n	80042aa <HAL_TIM_PWM_Start+0x72>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e015      	b.n	80042d6 <HAL_TIM_PWM_Start+0x9e>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d109      	bne.n	80042c4 <HAL_TIM_PWM_Start+0x8c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e008      	b.n	80042d6 <HAL_TIM_PWM_Start+0x9e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e097      	b.n	800440e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xb6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ec:	e023      	b.n	8004336 <HAL_TIM_PWM_Start+0xfe>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xc6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042fc:	e01b      	b.n	8004336 <HAL_TIM_PWM_Start+0xfe>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d104      	bne.n	800430e <HAL_TIM_PWM_Start+0xd6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	e013      	b.n	8004336 <HAL_TIM_PWM_Start+0xfe>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b0c      	cmp	r3, #12
 8004312:	d104      	bne.n	800431e <HAL_TIM_PWM_Start+0xe6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800431c:	e00b      	b.n	8004336 <HAL_TIM_PWM_Start+0xfe>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b10      	cmp	r3, #16
 8004322:	d104      	bne.n	800432e <HAL_TIM_PWM_Start+0xf6>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	e003      	b.n	8004336 <HAL_TIM_PWM_Start+0xfe>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 ff94 	bl	800526c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a33      	ldr	r2, [pc, #204]	; (8004418 <HAL_TIM_PWM_Start+0x1e0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <HAL_TIM_PWM_Start+0x13e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_TIM_PWM_Start+0x1e4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_TIM_PWM_Start+0x13e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a30      	ldr	r2, [pc, #192]	; (8004420 <HAL_TIM_PWM_Start+0x1e8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_TIM_PWM_Start+0x13e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_TIM_PWM_Start+0x1ec>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_TIM_PWM_Start+0x13e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <HAL_TIM_PWM_Start+0x1f0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_TIM_PWM_Start+0x142>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_TIM_PWM_Start+0x144>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <HAL_TIM_PWM_Start+0x1e0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_TIM_PWM_Start+0x194>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d013      	beq.n	80043cc <HAL_TIM_PWM_Start+0x194>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a20      	ldr	r2, [pc, #128]	; (800442c <HAL_TIM_PWM_Start+0x1f4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_TIM_PWM_Start+0x194>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_TIM_PWM_Start+0x1f8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_TIM_PWM_Start+0x194>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a17      	ldr	r2, [pc, #92]	; (800441c <HAL_TIM_PWM_Start+0x1e4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_PWM_Start+0x194>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_TIM_PWM_Start+0x1e8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d115      	bne.n	80043f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_TIM_PWM_Start+0x1fc>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d015      	beq.n	800440a <HAL_TIM_PWM_Start+0x1d2>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d011      	beq.n	800440a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e008      	b.n	800440a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e000      	b.n	800440c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40013400 	.word	0x40013400
 8004420:	40014000 	.word	0x40014000
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	00010007 	.word	0x00010007

08004438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d122      	bne.n	8004494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d11b      	bne.n	8004494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0202 	mvn.w	r2, #2
 8004464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fad8 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 faca 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fadb 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d122      	bne.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d11b      	bne.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0204 	mvn.w	r2, #4
 80044b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 faae 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 faa0 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fab1 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0208 	mvn.w	r2, #8
 800450c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2204      	movs	r2, #4
 8004512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa84 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa76 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa87 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0210 	mvn.w	r2, #16
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2208      	movs	r2, #8
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa5a 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa4c 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa5d 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0201 	mvn.w	r2, #1
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fcc8 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fef2 	bl	80053cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d10e      	bne.n	8004616 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d107      	bne.n	8004616 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fee5 	bl	80053e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d10e      	bne.n	8004642 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d107      	bne.n	8004642 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800463a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa0b 	bl	8004a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d10e      	bne.n	800466e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d107      	bne.n	800466e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0220 	mvn.w	r2, #32
 8004666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fea5 	bl	80053b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004692:	2302      	movs	r3, #2
 8004694:	e0ff      	b.n	8004896 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b14      	cmp	r3, #20
 80046a2:	f200 80f0 	bhi.w	8004886 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	08004701 	.word	0x08004701
 80046b0:	08004887 	.word	0x08004887
 80046b4:	08004887 	.word	0x08004887
 80046b8:	08004887 	.word	0x08004887
 80046bc:	08004741 	.word	0x08004741
 80046c0:	08004887 	.word	0x08004887
 80046c4:	08004887 	.word	0x08004887
 80046c8:	08004887 	.word	0x08004887
 80046cc:	08004783 	.word	0x08004783
 80046d0:	08004887 	.word	0x08004887
 80046d4:	08004887 	.word	0x08004887
 80046d8:	08004887 	.word	0x08004887
 80046dc:	080047c3 	.word	0x080047c3
 80046e0:	08004887 	.word	0x08004887
 80046e4:	08004887 	.word	0x08004887
 80046e8:	08004887 	.word	0x08004887
 80046ec:	08004805 	.word	0x08004805
 80046f0:	08004887 	.word	0x08004887
 80046f4:	08004887 	.word	0x08004887
 80046f8:	08004887 	.word	0x08004887
 80046fc:	08004845 	.word	0x08004845
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fa40 	bl	8004b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0208 	orr.w	r2, r2, #8
 800471a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6999      	ldr	r1, [r3, #24]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	619a      	str	r2, [r3, #24]
      break;
 800473e:	e0a5      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fab0 	bl	8004cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	619a      	str	r2, [r3, #24]
      break;
 8004780:	e084      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fb19 	bl	8004dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0208 	orr.w	r2, r2, #8
 800479c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0204 	bic.w	r2, r2, #4
 80047ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69d9      	ldr	r1, [r3, #28]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	61da      	str	r2, [r3, #28]
      break;
 80047c0:	e064      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fb81 	bl	8004ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69d9      	ldr	r1, [r3, #28]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	021a      	lsls	r2, r3, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	61da      	str	r2, [r3, #28]
      break;
 8004802:	e043      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fbca 	bl	8004fa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0208 	orr.w	r2, r2, #8
 800481e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0204 	bic.w	r2, r2, #4
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004842:	e023      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fc0e 	bl	800506c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	021a      	lsls	r2, r3, #8
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004884:	e002      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
      break;
 800488a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop

080048a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIM_ConfigClockSource+0x1c>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0ab      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d067      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0x128>
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d80b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x74>
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d073      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x148>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d802      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x6a>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d06f      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x148>
 8004908:	e077      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 800490a:	2b20      	cmp	r3, #32
 800490c:	d06c      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x148>
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d06a      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x148>
 8004912:	e072      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	2b70      	cmp	r3, #112	; 0x70
 8004916:	d00d      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0x94>
 8004918:	2b70      	cmp	r3, #112	; 0x70
 800491a:	d804      	bhi.n	8004926 <HAL_TIM_ConfigClockSource+0x86>
 800491c:	2b50      	cmp	r3, #80	; 0x50
 800491e:	d033      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0xe8>
 8004920:	2b60      	cmp	r3, #96	; 0x60
 8004922:	d041      	beq.n	80049a8 <HAL_TIM_ConfigClockSource+0x108>
 8004924:	e069      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	d069      	beq.n	8004a00 <HAL_TIM_ConfigClockSource+0x160>
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	d017      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0xc2>
 8004932:	e062      	b.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f000 fc72 	bl	800522c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]
      break;
 8004960:	e04f      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f000 fc5b 	bl	800522c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004984:	609a      	str	r2, [r3, #8]
      break;
 8004986:	e03c      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	461a      	mov	r2, r3
 8004996:	f000 fbcf 	bl	8005138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2150      	movs	r1, #80	; 0x50
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fc28 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 80049a6:	e02c      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f000 fbee 	bl	8005196 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2160      	movs	r1, #96	; 0x60
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fc18 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 80049c6:	e01c      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	461a      	mov	r2, r3
 80049d6:	f000 fbaf 	bl	8005138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2140      	movs	r1, #64	; 0x40
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fc08 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 80049e6:	e00c      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f000 fbff 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 80049f8:	e003      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      break;
 80049fe:	e000      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004a00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3c      	ldr	r2, [pc, #240]	; (8004b70 <TIM_Base_SetConfig+0x104>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a39      	ldr	r2, [pc, #228]	; (8004b74 <TIM_Base_SetConfig+0x108>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a38      	ldr	r2, [pc, #224]	; (8004b78 <TIM_Base_SetConfig+0x10c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a37      	ldr	r2, [pc, #220]	; (8004b7c <TIM_Base_SetConfig+0x110>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	; (8004b70 <TIM_Base_SetConfig+0x104>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <TIM_Base_SetConfig+0x108>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <TIM_Base_SetConfig+0x10c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <TIM_Base_SetConfig+0x110>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a27      	ldr	r2, [pc, #156]	; (8004b80 <TIM_Base_SetConfig+0x114>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a26      	ldr	r2, [pc, #152]	; (8004b84 <TIM_Base_SetConfig+0x118>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <TIM_Base_SetConfig+0x104>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00f      	beq.n	8004b54 <TIM_Base_SetConfig+0xe8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <TIM_Base_SetConfig+0x110>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0xe8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a10      	ldr	r2, [pc, #64]	; (8004b80 <TIM_Base_SetConfig+0x114>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0xe8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <TIM_Base_SetConfig+0x118>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0xe8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d103      	bne.n	8004b5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	615a      	str	r2, [r3, #20]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800

08004b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 0302 	bic.w	r3, r3, #2
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <TIM_OC1_SetConfig+0x10c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_OC1_SetConfig+0x80>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <TIM_OC1_SetConfig+0x110>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_OC1_SetConfig+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <TIM_OC1_SetConfig+0x114>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_OC1_SetConfig+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <TIM_OC1_SetConfig+0x118>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC1_SetConfig+0x80>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <TIM_OC1_SetConfig+0x11c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10c      	bne.n	8004c26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0308 	bic.w	r3, r3, #8
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <TIM_OC1_SetConfig+0x10c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <TIM_OC1_SetConfig+0xc2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <TIM_OC1_SetConfig+0x110>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_OC1_SetConfig+0xc2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <TIM_OC1_SetConfig+0x114>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <TIM_OC1_SetConfig+0xc2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <TIM_OC1_SetConfig+0x118>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_OC1_SetConfig+0xc2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <TIM_OC1_SetConfig+0x11c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d111      	bne.n	8004c72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800

08004cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0210 	bic.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0320 	bic.w	r3, r3, #32
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a28      	ldr	r2, [pc, #160]	; (8004dac <TIM_OC2_SetConfig+0x100>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_OC2_SetConfig+0x6c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_OC2_SetConfig+0x104>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d10d      	bne.n	8004d34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <TIM_OC2_SetConfig+0x100>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00f      	beq.n	8004d5c <TIM_OC2_SetConfig+0xb0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <TIM_OC2_SetConfig+0x104>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_OC2_SetConfig+0xb0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <TIM_OC2_SetConfig+0x108>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_OC2_SetConfig+0xb0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <TIM_OC2_SetConfig+0x10c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_OC2_SetConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC2_SetConfig+0x110>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d113      	bne.n	8004d84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d62:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d6a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a27      	ldr	r2, [pc, #156]	; (8004ebc <TIM_OC3_SetConfig+0xfc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_OC3_SetConfig+0x6a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <TIM_OC3_SetConfig+0x100>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10d      	bne.n	8004e46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <TIM_OC3_SetConfig+0xfc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_OC3_SetConfig+0xae>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <TIM_OC3_SetConfig+0x100>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_OC3_SetConfig+0xae>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <TIM_OC3_SetConfig+0x104>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_OC3_SetConfig+0xae>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <TIM_OC3_SetConfig+0x108>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC3_SetConfig+0xae>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <TIM_OC3_SetConfig+0x10c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d113      	bne.n	8004e96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800

08004ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	031b      	lsls	r3, r3, #12
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <TIM_OC4_SetConfig+0xc0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC4_SetConfig+0x84>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <TIM_OC4_SetConfig+0xc4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC4_SetConfig+0x84>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <TIM_OC4_SetConfig+0xc8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC4_SetConfig+0x84>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <TIM_OC4_SetConfig+0xcc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC4_SetConfig+0x84>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC4_SetConfig+0xd0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	; (8005058 <TIM_OC5_SetConfig+0xb4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_OC5_SetConfig+0x7a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a16      	ldr	r2, [pc, #88]	; (800505c <TIM_OC5_SetConfig+0xb8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_OC5_SetConfig+0x7a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <TIM_OC5_SetConfig+0xbc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_OC5_SetConfig+0x7a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC5_SetConfig+0xc0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_OC5_SetConfig+0x7a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a13      	ldr	r2, [pc, #76]	; (8005068 <TIM_OC5_SetConfig+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d109      	bne.n	8005032 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	621a      	str	r2, [r3, #32]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40013400 	.word	0x40013400
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800

0800506c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	051b      	lsls	r3, r3, #20
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <TIM_OC6_SetConfig+0xb8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00f      	beq.n	80050e8 <TIM_OC6_SetConfig+0x7c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <TIM_OC6_SetConfig+0xbc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00b      	beq.n	80050e8 <TIM_OC6_SetConfig+0x7c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <TIM_OC6_SetConfig+0xc0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <TIM_OC6_SetConfig+0x7c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <TIM_OC6_SetConfig+0xc4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC6_SetConfig+0x7c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <TIM_OC6_SetConfig+0xc8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d109      	bne.n	80050fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	029b      	lsls	r3, r3, #10
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40013400 	.word	0x40013400
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0210 	bic.w	r2, r3, #16
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 0307 	orr.w	r3, r3, #7
 8005218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	431a      	orrs	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2201      	movs	r2, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	43db      	mvns	r3, r3
 800528e:	401a      	ands	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	fa01 f303 	lsl.w	r3, r1, r3
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e063      	b.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2b      	ldr	r2, [pc, #172]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d108      	bne.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800530a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d018      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005342:	d013      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00e      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d009      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10c      	bne.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	4313      	orrs	r3, r2
 800537c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40014000 	.word	0x40014000

080053b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e040      	b.n	8005488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc fd46 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fc0e 	bl	8005c54 <UART_SetConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fdd4 	bl	8005ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fe5b 	bl	800613c <UART_CheckIdleState>
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	f040 8082 	bne.w	80055ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_UART_Transmit+0x26>
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07a      	b.n	80055b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Transmit+0x38>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e073      	b.n	80055b0 <HAL_UART_Transmit+0x120>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2221      	movs	r2, #33	; 0x21
 80054dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054de:	f7fc febf 	bl	8002260 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d108      	bne.n	8005510 <HAL_UART_Transmit+0x80>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	e003      	b.n	8005518 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005520:	e02d      	b.n	800557e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fe4e 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e039      	b.n	80055b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554e:	b292      	uxth	r2, r2
 8005550:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	3302      	adds	r3, #2
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	e008      	b.n	800556c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	b292      	uxth	r2, r2
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1cb      	bne.n	8005522 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	2140      	movs	r1, #64	; 0x40
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fe1a 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e005      	b.n	80055b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e000      	b.n	80055b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d13d      	bne.n	800564a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_UART_Receive_IT+0x22>
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e036      	b.n	800564c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Receive_IT+0x34>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e02f      	b.n	800564c <HAL_UART_Receive_IT+0x94>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d018      	beq.n	800563a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	613b      	str	r3, [r7, #16]
   return(result);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	69f9      	ldr	r1, [r7, #28]
 800562c:	6a3a      	ldr	r2, [r7, #32]
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	61bb      	str	r3, [r7, #24]
   return(result);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	461a      	mov	r2, r3
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fe89 	bl	8006358 <UART_Start_Receive_IT>
 8005646:	4603      	mov	r3, r0
 8005648:	e000      	b.n	800564c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3728      	adds	r7, #40	; 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b0ba      	sub	sp, #232	; 0xe8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800567a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800567e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005682:	4013      	ands	r3, r2
 8005684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d115      	bne.n	80056bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 82a4 	beq.w	8005bfa <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
      }
      return;
 80056ba:	e29e      	b.n	8005bfa <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8117 	beq.w	80058f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056d6:	4b85      	ldr	r3, [pc, #532]	; (80058ec <HAL_UART_IRQHandler+0x298>)
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 810a 	beq.w	80058f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d011      	beq.n	8005710 <HAL_UART_IRQHandler+0xbc>
 80056ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <HAL_UART_IRQHandler+0xec>
 800571c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2202      	movs	r2, #2
 800572e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d011      	beq.n	8005770 <HAL_UART_IRQHandler+0x11c>
 800574c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2204      	movs	r2, #4
 800575e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2208      	movs	r2, #8
 800579a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a2:	f043 0208 	orr.w	r2, r3, #8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d012      	beq.n	80057de <HAL_UART_IRQHandler+0x18a>
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 820a 	beq.w	8005bfe <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d005      	beq.n	8005836 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04f      	beq.n	80058d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fe26 	bl	8006488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d141      	bne.n	80058ce <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800587a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800588e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1d9      	bne.n	800584a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <HAL_UART_IRQHandler+0x29c>)
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fc fe50 	bl	8002550 <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d017      	beq.n	80058e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e00f      	b.n	80058e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9ae 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e00b      	b.n	80058e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9aa 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e007      	b.n	80058e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9a6 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80058e4:	e18b      	b.n	8005bfe <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e6:	bf00      	nop
    return;
 80058e8:	e189      	b.n	8005bfe <HAL_UART_IRQHandler+0x5aa>
 80058ea:	bf00      	nop
 80058ec:	04000120 	.word	0x04000120
 80058f0:	0800654f 	.word	0x0800654f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 8143 	bne.w	8005b84 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 813c 	beq.w	8005b84 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8135 	beq.w	8005b84 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2210      	movs	r2, #16
 8005920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	f040 80b1 	bne.w	8005a94 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800593e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 815d 	beq.w	8005c02 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800594e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005952:	429a      	cmp	r2, r3
 8005954:	f080 8155 	bcs.w	8005c02 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b20      	cmp	r3, #32
 800596a:	f000 8085 	beq.w	8005a78 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005998:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800599c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1da      	bne.n	800596e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e1      	bne.n	80059b8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e3      	bne.n	80059f4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a48:	f023 0310 	bic.w	r3, r3, #16
 8005a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e4      	bne.n	8005a38 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fc fd33 	bl	80024de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8d5 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a92:	e0b6      	b.n	8005c02 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80a8 	beq.w	8005c06 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005ab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80a3 	beq.w	8005c06 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e4      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	623b      	str	r3, [r7, #32]
   return(result);
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e3      	bne.n	8005af6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0310 	bic.w	r3, r3, #16
 8005b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e4      	bne.n	8005b40 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f85d 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b82:	e040      	b.n	8005c06 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <HAL_UART_IRQHandler+0x55a>
 8005b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fe6d 	bl	8006886 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bac:	e02e      	b.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00e      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01d      	beq.n	8005c0a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
    }
    return;
 8005bd6:	e018      	b.n	8005c0a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d013      	beq.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
 8005be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fcc2 	bl	800657a <UART_EndTransmit_IT>
    return;
 8005bf6:	bf00      	nop
 8005bf8:	e008      	b.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005bfa:	bf00      	nop
 8005bfc:	e006      	b.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
    return;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <HAL_UART_IRQHandler+0x5b8>
    return;
 8005c0a:	bf00      	nop
  }

}
 8005c0c:	37e8      	adds	r7, #232	; 0xe8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop

08005c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c82:	f023 030c 	bic.w	r3, r3, #12
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	6979      	ldr	r1, [r7, #20]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4aad      	ldr	r2, [pc, #692]	; (8005f84 <UART_SetConfig+0x330>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d121      	bne.n	8005d18 <UART_SetConfig+0xc4>
 8005cd4:	4bac      	ldr	r3, [pc, #688]	; (8005f88 <UART_SetConfig+0x334>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d817      	bhi.n	8005d10 <UART_SetConfig+0xbc>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <UART_SetConfig+0x94>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005d05 	.word	0x08005d05
 8005cf0:	08005d0b 	.word	0x08005d0b
 8005cf4:	08005cff 	.word	0x08005cff
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e0b2      	b.n	8005e64 <UART_SetConfig+0x210>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e0af      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d04:	2304      	movs	r3, #4
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e0ac      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e0a9      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d10:	2310      	movs	r3, #16
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	bf00      	nop
 8005d16:	e0a5      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a9b      	ldr	r2, [pc, #620]	; (8005f8c <UART_SetConfig+0x338>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d123      	bne.n	8005d6a <UART_SetConfig+0x116>
 8005d22:	4b99      	ldr	r3, [pc, #612]	; (8005f88 <UART_SetConfig+0x334>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2e:	d012      	beq.n	8005d56 <UART_SetConfig+0x102>
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d802      	bhi.n	8005d3c <UART_SetConfig+0xe8>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <UART_SetConfig+0xf6>
 8005d3a:	e012      	b.n	8005d62 <UART_SetConfig+0x10e>
 8005d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d40:	d00c      	beq.n	8005d5c <UART_SetConfig+0x108>
 8005d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d46:	d003      	beq.n	8005d50 <UART_SetConfig+0xfc>
 8005d48:	e00b      	b.n	8005d62 <UART_SetConfig+0x10e>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e089      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d50:	2302      	movs	r3, #2
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e086      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d56:	2304      	movs	r3, #4
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e083      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e080      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d62:	2310      	movs	r3, #16
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	bf00      	nop
 8005d68:	e07c      	b.n	8005e64 <UART_SetConfig+0x210>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a88      	ldr	r2, [pc, #544]	; (8005f90 <UART_SetConfig+0x33c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d123      	bne.n	8005dbc <UART_SetConfig+0x168>
 8005d74:	4b84      	ldr	r3, [pc, #528]	; (8005f88 <UART_SetConfig+0x334>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d80:	d012      	beq.n	8005da8 <UART_SetConfig+0x154>
 8005d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d86:	d802      	bhi.n	8005d8e <UART_SetConfig+0x13a>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <UART_SetConfig+0x148>
 8005d8c:	e012      	b.n	8005db4 <UART_SetConfig+0x160>
 8005d8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d92:	d00c      	beq.n	8005dae <UART_SetConfig+0x15a>
 8005d94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d98:	d003      	beq.n	8005da2 <UART_SetConfig+0x14e>
 8005d9a:	e00b      	b.n	8005db4 <UART_SetConfig+0x160>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e060      	b.n	8005e64 <UART_SetConfig+0x210>
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e05d      	b.n	8005e64 <UART_SetConfig+0x210>
 8005da8:	2304      	movs	r3, #4
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e05a      	b.n	8005e64 <UART_SetConfig+0x210>
 8005dae:	2308      	movs	r3, #8
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e057      	b.n	8005e64 <UART_SetConfig+0x210>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	bf00      	nop
 8005dba:	e053      	b.n	8005e64 <UART_SetConfig+0x210>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a74      	ldr	r2, [pc, #464]	; (8005f94 <UART_SetConfig+0x340>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d123      	bne.n	8005e0e <UART_SetConfig+0x1ba>
 8005dc6:	4b70      	ldr	r3, [pc, #448]	; (8005f88 <UART_SetConfig+0x334>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd2:	d012      	beq.n	8005dfa <UART_SetConfig+0x1a6>
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd8:	d802      	bhi.n	8005de0 <UART_SetConfig+0x18c>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <UART_SetConfig+0x19a>
 8005dde:	e012      	b.n	8005e06 <UART_SetConfig+0x1b2>
 8005de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de4:	d00c      	beq.n	8005e00 <UART_SetConfig+0x1ac>
 8005de6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dea:	d003      	beq.n	8005df4 <UART_SetConfig+0x1a0>
 8005dec:	e00b      	b.n	8005e06 <UART_SetConfig+0x1b2>
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e037      	b.n	8005e64 <UART_SetConfig+0x210>
 8005df4:	2302      	movs	r3, #2
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e034      	b.n	8005e64 <UART_SetConfig+0x210>
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e031      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e00:	2308      	movs	r3, #8
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e02e      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e06:	2310      	movs	r3, #16
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	bf00      	nop
 8005e0c:	e02a      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a61      	ldr	r2, [pc, #388]	; (8005f98 <UART_SetConfig+0x344>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d123      	bne.n	8005e60 <UART_SetConfig+0x20c>
 8005e18:	4b5b      	ldr	r3, [pc, #364]	; (8005f88 <UART_SetConfig+0x334>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e24:	d012      	beq.n	8005e4c <UART_SetConfig+0x1f8>
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2a:	d802      	bhi.n	8005e32 <UART_SetConfig+0x1de>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <UART_SetConfig+0x1ec>
 8005e30:	e012      	b.n	8005e58 <UART_SetConfig+0x204>
 8005e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e36:	d00c      	beq.n	8005e52 <UART_SetConfig+0x1fe>
 8005e38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e3c:	d003      	beq.n	8005e46 <UART_SetConfig+0x1f2>
 8005e3e:	e00b      	b.n	8005e58 <UART_SetConfig+0x204>
 8005e40:	2300      	movs	r3, #0
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e00e      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e46:	2302      	movs	r3, #2
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e00b      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e008      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e52:	2308      	movs	r3, #8
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e005      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	bf00      	nop
 8005e5e:	e001      	b.n	8005e64 <UART_SetConfig+0x210>
 8005e60:	2310      	movs	r3, #16
 8005e62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	d15d      	bne.n	8005f2a <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8005e6e:	7ffb      	ldrb	r3, [r7, #31]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d828      	bhi.n	8005ec6 <UART_SetConfig+0x272>
 8005e74:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0x228>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	08005ec7 	.word	0x08005ec7
 8005e8c:	08005eb7 	.word	0x08005eb7
 8005e90:	08005ec7 	.word	0x08005ec7
 8005e94:	08005ec7 	.word	0x08005ec7
 8005e98:	08005ec7 	.word	0x08005ec7
 8005e9c:	08005ebf 	.word	0x08005ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea0:	f7fd fe50 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8005ea4:	61b8      	str	r0, [r7, #24]
        break;
 8005ea6:	e013      	b.n	8005ed0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea8:	f7fd fe6e 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8005eac:	61b8      	str	r0, [r7, #24]
        break;
 8005eae:	e00f      	b.n	8005ed0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	; (8005f9c <UART_SetConfig+0x348>)
 8005eb2:	61bb      	str	r3, [r7, #24]
        break;
 8005eb4:	e00c      	b.n	8005ed0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb6:	f7fd fdcf 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8005eba:	61b8      	str	r0, [r7, #24]
        break;
 8005ebc:	e008      	b.n	8005ed0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec2:	61bb      	str	r3, [r7, #24]
        break;
 8005ec4:	e004      	b.n	8005ed0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8005ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8085 	beq.w	8005fe2 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	005a      	lsls	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	441a      	add	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0f      	cmp	r3, #15
 8005ef4:	d916      	bls.n	8005f24 <UART_SetConfig+0x2d0>
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d212      	bcs.n	8005f24 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f023 030f 	bic.w	r3, r3, #15
 8005f06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	89fb      	ldrh	r3, [r7, #14]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	89fa      	ldrh	r2, [r7, #14]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e05e      	b.n	8005fe2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	77bb      	strb	r3, [r7, #30]
 8005f28:	e05b      	b.n	8005fe2 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f2a:	7ffb      	ldrb	r3, [r7, #31]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d837      	bhi.n	8005fa0 <UART_SetConfig+0x34c>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0x2e4>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	08005fa1 	.word	0x08005fa1
 8005f48:	08005f73 	.word	0x08005f73
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005fa1 	.word	0x08005fa1
 8005f54:	08005fa1 	.word	0x08005fa1
 8005f58:	08005f7b 	.word	0x08005f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7fd fdf2 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8005f60:	61b8      	str	r0, [r7, #24]
        break;
 8005f62:	e022      	b.n	8005faa <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f64:	f7fd fe10 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8005f68:	61b8      	str	r0, [r7, #24]
        break;
 8005f6a:	e01e      	b.n	8005faa <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <UART_SetConfig+0x348>)
 8005f6e:	61bb      	str	r3, [r7, #24]
        break;
 8005f70:	e01b      	b.n	8005faa <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f72:	f7fd fd71 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8005f76:	61b8      	str	r0, [r7, #24]
        break;
 8005f78:	e017      	b.n	8005faa <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7e:	61bb      	str	r3, [r7, #24]
        break;
 8005f80:	e013      	b.n	8005faa <UART_SetConfig+0x356>
 8005f82:	bf00      	nop
 8005f84:	40013800 	.word	0x40013800
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40004400 	.word	0x40004400
 8005f90:	40004800 	.word	0x40004800
 8005f94:	40004c00 	.word	0x40004c00
 8005f98:	40005000 	.word	0x40005000
 8005f9c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	77bb      	strb	r3, [r7, #30]
        break;
 8005fa8:	bf00      	nop
    }

    if (pclk != 0U)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d018      	beq.n	8005fe2 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	085a      	lsrs	r2, r3, #1
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	441a      	add	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b0f      	cmp	r3, #15
 8005fca:	d908      	bls.n	8005fde <UART_SetConfig+0x38a>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd2:	d204      	bcs.n	8005fde <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	60da      	str	r2, [r3, #12]
 8005fdc:	e001      	b.n	8005fe2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fee:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01a      	beq.n	800610e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d10a      	bne.n	800610e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
  }
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af02      	add	r7, sp, #8
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800614c:	f7fc f888 	bl	8002260 <HAL_GetTick>
 8006150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b08      	cmp	r3, #8
 800615e:	d10e      	bne.n	800617e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f82d 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e023      	b.n	80061c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d10e      	bne.n	80061aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f817 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e00d      	b.n	80061c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b09c      	sub	sp, #112	; 0x70
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061de:	e0a5      	b.n	800632c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	f000 80a1 	beq.w	800632c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ea:	f7fc f839 	bl	8002260 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d302      	bcc.n	8006200 <UART_WaitOnFlagUntilTimeout+0x32>
 80061fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d13e      	bne.n	800627e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800620e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006214:	667b      	str	r3, [r7, #100]	; 0x64
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800621e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006220:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800622c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e6      	bne.n	8006200 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3308      	adds	r3, #8
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	663b      	str	r3, [r7, #96]	; 0x60
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006252:	64ba      	str	r2, [r7, #72]	; 0x48
 8006254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e067      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d04f      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629a:	d147      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
 80062c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3308      	adds	r3, #8
 80062de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	613b      	str	r3, [r7, #16]
   return(result);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f023 0301 	bic.w	r3, r3, #1
 80062ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062f8:	623a      	str	r2, [r7, #32]
 80062fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	69f9      	ldr	r1, [r7, #28]
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	61bb      	str	r3, [r7, #24]
   return(result);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e5      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e010      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4013      	ands	r3, r2
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	429a      	cmp	r2, r3
 8006348:	f43f af4a 	beq.w	80061e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3770      	adds	r7, #112	; 0x70
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006358:	b480      	push	{r7}
 800635a:	b091      	sub	sp, #68	; 0x44
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638a:	d10e      	bne.n	80063aa <UART_Start_Receive_IT+0x52>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <UART_Start_Receive_IT+0x48>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f240 12ff 	movw	r2, #511	; 0x1ff
 800639a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800639e:	e01a      	b.n	80063d6 <UART_Start_Receive_IT+0x7e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	22ff      	movs	r2, #255	; 0xff
 80063a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a8:	e015      	b.n	80063d6 <UART_Start_Receive_IT+0x7e>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <UART_Start_Receive_IT+0x76>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <UART_Start_Receive_IT+0x6c>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	22ff      	movs	r2, #255	; 0xff
 80063be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063c2:	e008      	b.n	80063d6 <UART_Start_Receive_IT+0x7e>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	227f      	movs	r2, #127	; 0x7f
 80063c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063cc:	e003      	b.n	80063d6 <UART_Start_Receive_IT+0x7e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2222      	movs	r2, #34	; 0x22
 80063e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006404:	637a      	str	r2, [r7, #52]	; 0x34
 8006406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800640a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e5      	bne.n	80063e4 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d107      	bne.n	8006432 <UART_Start_Receive_IT+0xda>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d103      	bne.n	8006432 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <UART_Start_Receive_IT+0x128>)
 800642e:	665a      	str	r2, [r3, #100]	; 0x64
 8006430:	e002      	b.n	8006438 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <UART_Start_Receive_IT+0x12c>)
 8006436:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	613b      	str	r3, [r7, #16]
   return(result);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006454:	63bb      	str	r3, [r7, #56]	; 0x38
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	61bb      	str	r3, [r7, #24]
   return(result);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3744      	adds	r7, #68	; 0x44
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	0800672b 	.word	0x0800672b
 8006484:	080065cf 	.word	0x080065cf

08006488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b095      	sub	sp, #84	; 0x54
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	643b      	str	r3, [r7, #64]	; 0x40
 80064b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e6      	bne.n	8006490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e5      	bne.n	80064c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d118      	bne.n	8006530 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	60bb      	str	r3, [r7, #8]
   return(result);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f023 0310 	bic.w	r3, r3, #16
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6979      	ldr	r1, [r7, #20]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	613b      	str	r3, [r7, #16]
   return(result);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e6      	bne.n	80064fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006542:	bf00      	nop
 8006544:	3754      	adds	r7, #84	; 0x54
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fb5b 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	613b      	str	r3, [r7, #16]
   return(result);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e6      	bne.n	8006582 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff fb27 	bl	8005c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c6:	bf00      	nop
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b096      	sub	sp, #88	; 0x58
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e4:	2b22      	cmp	r3, #34	; 0x22
 80065e6:	f040 8094 	bne.w	8006712 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065f8:	b2d9      	uxtb	r1, r3
 80065fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	400a      	ands	r2, r1
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d177      	bne.n	8006722 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006646:	653b      	str	r3, [r7, #80]	; 0x50
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
 8006652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3308      	adds	r3, #8
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	623b      	str	r3, [r7, #32]
   return(result);
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006684:	633a      	str	r2, [r7, #48]	; 0x30
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800668a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e5      	bne.n	8006664 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d12e      	bne.n	800670a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0310 	bic.w	r3, r3, #16
 80066c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	69b9      	ldr	r1, [r7, #24]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	617b      	str	r3, [r7, #20]
   return(result);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e6      	bne.n	80066b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d103      	bne.n	80066fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2210      	movs	r2, #16
 80066f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fa9a 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006708:	e00b      	b.n	8006722 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fa fae6 	bl	8000cdc <HAL_UART_RxCpltCallback>
}
 8006710:	e007      	b.n	8006722 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0208 	orr.w	r2, r2, #8
 8006720:	619a      	str	r2, [r3, #24]
}
 8006722:	bf00      	nop
 8006724:	3758      	adds	r7, #88	; 0x58
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b096      	sub	sp, #88	; 0x58
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006738:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006740:	2b22      	cmp	r3, #34	; 0x22
 8006742:	f040 8094 	bne.w	800686e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800674c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006756:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800675a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800675e:	4013      	ands	r3, r2
 8006760:	b29a      	uxth	r2, r3
 8006762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006764:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d177      	bne.n	800687e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
 80067ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e6      	bne.n	800678e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e5      	bne.n	80067c0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006804:	2b01      	cmp	r3, #1
 8006806:	d12e      	bne.n	8006866 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	60bb      	str	r3, [r7, #8]
   return(result);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f023 0310 	bic.w	r3, r3, #16
 8006822:	647b      	str	r3, [r7, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	613b      	str	r3, [r7, #16]
   return(result);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b10      	cmp	r3, #16
 800684c:	d103      	bne.n	8006856 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2210      	movs	r2, #16
 8006854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff f9ec 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006864:	e00b      	b.n	800687e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fa fa38 	bl	8000cdc <HAL_UART_RxCpltCallback>
}
 800686c:	e007      	b.n	800687e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0208 	orr.w	r2, r2, #8
 800687c:	619a      	str	r2, [r3, #24]
}
 800687e:	bf00      	nop
 8006880:	3758      	adds	r7, #88	; 0x58
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4e0d      	ldr	r6, [pc, #52]	; (80068d4 <__libc_init_array+0x38>)
 80068a0:	4c0d      	ldr	r4, [pc, #52]	; (80068d8 <__libc_init_array+0x3c>)
 80068a2:	1ba4      	subs	r4, r4, r6
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	2500      	movs	r5, #0
 80068a8:	42a5      	cmp	r5, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	4e0b      	ldr	r6, [pc, #44]	; (80068dc <__libc_init_array+0x40>)
 80068ae:	4c0c      	ldr	r4, [pc, #48]	; (80068e0 <__libc_init_array+0x44>)
 80068b0:	f001 f84c 	bl	800794c <_init>
 80068b4:	1ba4      	subs	r4, r4, r6
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	2500      	movs	r5, #0
 80068ba:	42a5      	cmp	r5, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c4:	4798      	blx	r3
 80068c6:	3501      	adds	r5, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ce:	4798      	blx	r3
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	08007c70 	.word	0x08007c70
 80068d8:	08007c70 	.word	0x08007c70
 80068dc:	08007c70 	.word	0x08007c70
 80068e0:	08007c74 	.word	0x08007c74

080068e4 <memset>:
 80068e4:	4402      	add	r2, r0
 80068e6:	4603      	mov	r3, r0
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d100      	bne.n	80068ee <memset+0xa>
 80068ec:	4770      	bx	lr
 80068ee:	f803 1b01 	strb.w	r1, [r3], #1
 80068f2:	e7f9      	b.n	80068e8 <memset+0x4>

080068f4 <strcpy>:
 80068f4:	4603      	mov	r3, r0
 80068f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068fa:	f803 2b01 	strb.w	r2, [r3], #1
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1f9      	bne.n	80068f6 <strcpy+0x2>
 8006902:	4770      	bx	lr

08006904 <strncmp>:
 8006904:	b510      	push	{r4, lr}
 8006906:	b16a      	cbz	r2, 8006924 <strncmp+0x20>
 8006908:	3901      	subs	r1, #1
 800690a:	1884      	adds	r4, r0, r2
 800690c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006910:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <strncmp+0x1c>
 8006918:	42a0      	cmp	r0, r4
 800691a:	d001      	beq.n	8006920 <strncmp+0x1c>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1f5      	bne.n	800690c <strncmp+0x8>
 8006920:	1a98      	subs	r0, r3, r2
 8006922:	bd10      	pop	{r4, pc}
 8006924:	4610      	mov	r0, r2
 8006926:	e7fc      	b.n	8006922 <strncmp+0x1e>

08006928 <sin>:
 8006928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800692a:	ec51 0b10 	vmov	r0, r1, d0
 800692e:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <sin+0x88>)
 8006930:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006934:	4293      	cmp	r3, r2
 8006936:	dc07      	bgt.n	8006948 <sin+0x20>
 8006938:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80069a8 <sin+0x80>
 800693c:	2000      	movs	r0, #0
 800693e:	f000 fe37 	bl	80075b0 <__kernel_sin>
 8006942:	ec51 0b10 	vmov	r0, r1, d0
 8006946:	e007      	b.n	8006958 <sin+0x30>
 8006948:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <sin+0x8c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	dd09      	ble.n	8006962 <sin+0x3a>
 800694e:	ee10 2a10 	vmov	r2, s0
 8006952:	460b      	mov	r3, r1
 8006954:	f7f9 fc4e 	bl	80001f4 <__aeabi_dsub>
 8006958:	ec41 0b10 	vmov	d0, r0, r1
 800695c:	b005      	add	sp, #20
 800695e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006962:	4668      	mov	r0, sp
 8006964:	f000 f828 	bl	80069b8 <__ieee754_rem_pio2>
 8006968:	f000 0003 	and.w	r0, r0, #3
 800696c:	2801      	cmp	r0, #1
 800696e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006972:	ed9d 0b00 	vldr	d0, [sp]
 8006976:	d004      	beq.n	8006982 <sin+0x5a>
 8006978:	2802      	cmp	r0, #2
 800697a:	d005      	beq.n	8006988 <sin+0x60>
 800697c:	b970      	cbnz	r0, 800699c <sin+0x74>
 800697e:	2001      	movs	r0, #1
 8006980:	e7dd      	b.n	800693e <sin+0x16>
 8006982:	f000 fa0d 	bl	8006da0 <__kernel_cos>
 8006986:	e7dc      	b.n	8006942 <sin+0x1a>
 8006988:	2001      	movs	r0, #1
 800698a:	f000 fe11 	bl	80075b0 <__kernel_sin>
 800698e:	ec53 2b10 	vmov	r2, r3, d0
 8006992:	ee10 0a10 	vmov	r0, s0
 8006996:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800699a:	e7dd      	b.n	8006958 <sin+0x30>
 800699c:	f000 fa00 	bl	8006da0 <__kernel_cos>
 80069a0:	e7f5      	b.n	800698e <sin+0x66>
 80069a2:	bf00      	nop
 80069a4:	f3af 8000 	nop.w
	...
 80069b0:	3fe921fb 	.word	0x3fe921fb
 80069b4:	7fefffff 	.word	0x7fefffff

080069b8 <__ieee754_rem_pio2>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	ec57 6b10 	vmov	r6, r7, d0
 80069c0:	4bc3      	ldr	r3, [pc, #780]	; (8006cd0 <__ieee754_rem_pio2+0x318>)
 80069c2:	b08d      	sub	sp, #52	; 0x34
 80069c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80069c8:	4598      	cmp	r8, r3
 80069ca:	4604      	mov	r4, r0
 80069cc:	9704      	str	r7, [sp, #16]
 80069ce:	dc07      	bgt.n	80069e0 <__ieee754_rem_pio2+0x28>
 80069d0:	2200      	movs	r2, #0
 80069d2:	2300      	movs	r3, #0
 80069d4:	ed84 0b00 	vstr	d0, [r4]
 80069d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80069dc:	2500      	movs	r5, #0
 80069de:	e027      	b.n	8006a30 <__ieee754_rem_pio2+0x78>
 80069e0:	4bbc      	ldr	r3, [pc, #752]	; (8006cd4 <__ieee754_rem_pio2+0x31c>)
 80069e2:	4598      	cmp	r8, r3
 80069e4:	dc75      	bgt.n	8006ad2 <__ieee754_rem_pio2+0x11a>
 80069e6:	9b04      	ldr	r3, [sp, #16]
 80069e8:	4dbb      	ldr	r5, [pc, #748]	; (8006cd8 <__ieee754_rem_pio2+0x320>)
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	ee10 0a10 	vmov	r0, s0
 80069f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006c98 <__ieee754_rem_pio2+0x2e0>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	4639      	mov	r1, r7
 80069f8:	dd36      	ble.n	8006a68 <__ieee754_rem_pio2+0xb0>
 80069fa:	f7f9 fbfb 	bl	80001f4 <__aeabi_dsub>
 80069fe:	45a8      	cmp	r8, r5
 8006a00:	4606      	mov	r6, r0
 8006a02:	460f      	mov	r7, r1
 8006a04:	d018      	beq.n	8006a38 <__ieee754_rem_pio2+0x80>
 8006a06:	a3a6      	add	r3, pc, #664	; (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7f9 fbf2 	bl	80001f4 <__aeabi_dsub>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e9c4 2300 	strd	r2, r3, [r4]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7f9 fbea 	bl	80001f4 <__aeabi_dsub>
 8006a20:	a39f      	add	r3, pc, #636	; (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fbe5 	bl	80001f4 <__aeabi_dsub>
 8006a2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a2e:	2501      	movs	r5, #1
 8006a30:	4628      	mov	r0, r5
 8006a32:	b00d      	add	sp, #52	; 0x34
 8006a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a38:	a39b      	add	r3, pc, #620	; (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fbd9 	bl	80001f4 <__aeabi_dsub>
 8006a42:	a39b      	add	r3, pc, #620	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	4606      	mov	r6, r0
 8006a4a:	460f      	mov	r7, r1
 8006a4c:	f7f9 fbd2 	bl	80001f4 <__aeabi_dsub>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	e9c4 2300 	strd	r2, r3, [r4]
 8006a58:	4630      	mov	r0, r6
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7f9 fbca 	bl	80001f4 <__aeabi_dsub>
 8006a60:	a393      	add	r3, pc, #588	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	e7de      	b.n	8006a26 <__ieee754_rem_pio2+0x6e>
 8006a68:	f7f9 fbc6 	bl	80001f8 <__adddf3>
 8006a6c:	45a8      	cmp	r8, r5
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	d016      	beq.n	8006aa2 <__ieee754_rem_pio2+0xea>
 8006a74:	a38a      	add	r3, pc, #552	; (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbbd 	bl	80001f8 <__adddf3>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	e9c4 2300 	strd	r2, r3, [r4]
 8006a86:	4630      	mov	r0, r6
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f7f9 fbb3 	bl	80001f4 <__aeabi_dsub>
 8006a8e:	a384      	add	r3, pc, #528	; (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fbb0 	bl	80001f8 <__adddf3>
 8006a98:	f04f 35ff 	mov.w	r5, #4294967295
 8006a9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006aa0:	e7c6      	b.n	8006a30 <__ieee754_rem_pio2+0x78>
 8006aa2:	a381      	add	r3, pc, #516	; (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fba6 	bl	80001f8 <__adddf3>
 8006aac:	a380      	add	r3, pc, #512	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7f9 fb9f 	bl	80001f8 <__adddf3>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	e9c4 2300 	strd	r2, r3, [r4]
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	f7f9 fb95 	bl	80001f4 <__aeabi_dsub>
 8006aca:	a379      	add	r3, pc, #484	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	e7e0      	b.n	8006a94 <__ieee754_rem_pio2+0xdc>
 8006ad2:	4b82      	ldr	r3, [pc, #520]	; (8006cdc <__ieee754_rem_pio2+0x324>)
 8006ad4:	4598      	cmp	r8, r3
 8006ad6:	f300 80d0 	bgt.w	8006c7a <__ieee754_rem_pio2+0x2c2>
 8006ada:	f000 fe23 	bl	8007724 <fabs>
 8006ade:	ec57 6b10 	vmov	r6, r7, d0
 8006ae2:	ee10 0a10 	vmov	r0, s0
 8006ae6:	a374      	add	r3, pc, #464	; (adr r3, 8006cb8 <__ieee754_rem_pio2+0x300>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7f9 fd39 	bl	8000564 <__aeabi_dmul>
 8006af2:	2200      	movs	r2, #0
 8006af4:	4b7a      	ldr	r3, [pc, #488]	; (8006ce0 <__ieee754_rem_pio2+0x328>)
 8006af6:	f7f9 fb7f 	bl	80001f8 <__adddf3>
 8006afa:	f7f9 ffcd 	bl	8000a98 <__aeabi_d2iz>
 8006afe:	4605      	mov	r5, r0
 8006b00:	f7f9 fcc6 	bl	8000490 <__aeabi_i2d>
 8006b04:	a364      	add	r3, pc, #400	; (adr r3, 8006c98 <__ieee754_rem_pio2+0x2e0>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b0e:	f7f9 fd29 	bl	8000564 <__aeabi_dmul>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fb6b 	bl	80001f4 <__aeabi_dsub>
 8006b1e:	a360      	add	r3, pc, #384	; (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	4682      	mov	sl, r0
 8006b26:	468b      	mov	fp, r1
 8006b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2c:	f7f9 fd1a 	bl	8000564 <__aeabi_dmul>
 8006b30:	2d1f      	cmp	r5, #31
 8006b32:	4606      	mov	r6, r0
 8006b34:	460f      	mov	r7, r1
 8006b36:	dc0c      	bgt.n	8006b52 <__ieee754_rem_pio2+0x19a>
 8006b38:	1e6a      	subs	r2, r5, #1
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	; (8006ce4 <__ieee754_rem_pio2+0x32c>)
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	4543      	cmp	r3, r8
 8006b42:	d006      	beq.n	8006b52 <__ieee754_rem_pio2+0x19a>
 8006b44:	4632      	mov	r2, r6
 8006b46:	463b      	mov	r3, r7
 8006b48:	4650      	mov	r0, sl
 8006b4a:	4659      	mov	r1, fp
 8006b4c:	f7f9 fb52 	bl	80001f4 <__aeabi_dsub>
 8006b50:	e00e      	b.n	8006b70 <__ieee754_rem_pio2+0x1b8>
 8006b52:	4632      	mov	r2, r6
 8006b54:	463b      	mov	r3, r7
 8006b56:	4650      	mov	r0, sl
 8006b58:	4659      	mov	r1, fp
 8006b5a:	f7f9 fb4b 	bl	80001f4 <__aeabi_dsub>
 8006b5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006b62:	9305      	str	r3, [sp, #20]
 8006b64:	9a05      	ldr	r2, [sp, #20]
 8006b66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	dc02      	bgt.n	8006b76 <__ieee754_rem_pio2+0x1be>
 8006b70:	e9c4 0100 	strd	r0, r1, [r4]
 8006b74:	e039      	b.n	8006bea <__ieee754_rem_pio2+0x232>
 8006b76:	a34c      	add	r3, pc, #304	; (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b80:	f7f9 fcf0 	bl	8000564 <__aeabi_dmul>
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	4659      	mov	r1, fp
 8006b90:	f7f9 fb30 	bl	80001f4 <__aeabi_dsub>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	4659      	mov	r1, fp
 8006ba0:	f7f9 fb28 	bl	80001f4 <__aeabi_dsub>
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	f7f9 fb24 	bl	80001f4 <__aeabi_dsub>
 8006bac:	a340      	add	r3, pc, #256	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bba:	f7f9 fcd3 	bl	8000564 <__aeabi_dmul>
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	f7f9 fb17 	bl	80001f4 <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460f      	mov	r7, r1
 8006bce:	4640      	mov	r0, r8
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	f7f9 fb0f 	bl	80001f4 <__aeabi_dsub>
 8006bd6:	9a05      	ldr	r2, [sp, #20]
 8006bd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b31      	cmp	r3, #49	; 0x31
 8006be0:	dc20      	bgt.n	8006c24 <__ieee754_rem_pio2+0x26c>
 8006be2:	e9c4 0100 	strd	r0, r1, [r4]
 8006be6:	46c2      	mov	sl, r8
 8006be8:	46cb      	mov	fp, r9
 8006bea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006bee:	4650      	mov	r0, sl
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	f7f9 fafd 	bl	80001f4 <__aeabi_dsub>
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	f7f9 faf9 	bl	80001f4 <__aeabi_dsub>
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c0a:	f6bf af11 	bge.w	8006a30 <__ieee754_rem_pio2+0x78>
 8006c0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c12:	6063      	str	r3, [r4, #4]
 8006c14:	f8c4 8000 	str.w	r8, [r4]
 8006c18:	60a0      	str	r0, [r4, #8]
 8006c1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c1e:	60e3      	str	r3, [r4, #12]
 8006c20:	426d      	negs	r5, r5
 8006c22:	e705      	b.n	8006a30 <__ieee754_rem_pio2+0x78>
 8006c24:	a326      	add	r3, pc, #152	; (adr r3, 8006cc0 <__ieee754_rem_pio2+0x308>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c2e:	f7f9 fc99 	bl	8000564 <__aeabi_dmul>
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	f7f9 fad9 	bl	80001f4 <__aeabi_dsub>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4682      	mov	sl, r0
 8006c48:	468b      	mov	fp, r1
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	f7f9 fad1 	bl	80001f4 <__aeabi_dsub>
 8006c52:	4632      	mov	r2, r6
 8006c54:	463b      	mov	r3, r7
 8006c56:	f7f9 facd 	bl	80001f4 <__aeabi_dsub>
 8006c5a:	a31b      	add	r3, pc, #108	; (adr r3, 8006cc8 <__ieee754_rem_pio2+0x310>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	4606      	mov	r6, r0
 8006c62:	460f      	mov	r7, r1
 8006c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c68:	f7f9 fc7c 	bl	8000564 <__aeabi_dmul>
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	463b      	mov	r3, r7
 8006c70:	f7f9 fac0 	bl	80001f4 <__aeabi_dsub>
 8006c74:	4606      	mov	r6, r0
 8006c76:	460f      	mov	r7, r1
 8006c78:	e764      	b.n	8006b44 <__ieee754_rem_pio2+0x18c>
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <__ieee754_rem_pio2+0x330>)
 8006c7c:	4598      	cmp	r8, r3
 8006c7e:	dd35      	ble.n	8006cec <__ieee754_rem_pio2+0x334>
 8006c80:	ee10 2a10 	vmov	r2, s0
 8006c84:	463b      	mov	r3, r7
 8006c86:	4630      	mov	r0, r6
 8006c88:	4639      	mov	r1, r7
 8006c8a:	f7f9 fab3 	bl	80001f4 <__aeabi_dsub>
 8006c8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c92:	e9c4 0100 	strd	r0, r1, [r4]
 8006c96:	e6a1      	b.n	80069dc <__ieee754_rem_pio2+0x24>
 8006c98:	54400000 	.word	0x54400000
 8006c9c:	3ff921fb 	.word	0x3ff921fb
 8006ca0:	1a626331 	.word	0x1a626331
 8006ca4:	3dd0b461 	.word	0x3dd0b461
 8006ca8:	1a600000 	.word	0x1a600000
 8006cac:	3dd0b461 	.word	0x3dd0b461
 8006cb0:	2e037073 	.word	0x2e037073
 8006cb4:	3ba3198a 	.word	0x3ba3198a
 8006cb8:	6dc9c883 	.word	0x6dc9c883
 8006cbc:	3fe45f30 	.word	0x3fe45f30
 8006cc0:	2e000000 	.word	0x2e000000
 8006cc4:	3ba3198a 	.word	0x3ba3198a
 8006cc8:	252049c1 	.word	0x252049c1
 8006ccc:	397b839a 	.word	0x397b839a
 8006cd0:	3fe921fb 	.word	0x3fe921fb
 8006cd4:	4002d97b 	.word	0x4002d97b
 8006cd8:	3ff921fb 	.word	0x3ff921fb
 8006cdc:	413921fb 	.word	0x413921fb
 8006ce0:	3fe00000 	.word	0x3fe00000
 8006ce4:	08007a94 	.word	0x08007a94
 8006ce8:	7fefffff 	.word	0x7fefffff
 8006cec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006cf0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006cf4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	f7f9 fecc 	bl	8000a98 <__aeabi_d2iz>
 8006d00:	f7f9 fbc6 	bl	8000490 <__aeabi_i2d>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d10:	f7f9 fa70 	bl	80001f4 <__aeabi_dsub>
 8006d14:	2200      	movs	r2, #0
 8006d16:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <__ieee754_rem_pio2+0x3dc>)
 8006d18:	f7f9 fc24 	bl	8000564 <__aeabi_dmul>
 8006d1c:	460f      	mov	r7, r1
 8006d1e:	4606      	mov	r6, r0
 8006d20:	f7f9 feba 	bl	8000a98 <__aeabi_d2iz>
 8006d24:	f7f9 fbb4 	bl	8000490 <__aeabi_i2d>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4639      	mov	r1, r7
 8006d30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d34:	f7f9 fa5e 	bl	80001f4 <__aeabi_dsub>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <__ieee754_rem_pio2+0x3dc>)
 8006d3c:	f7f9 fc12 	bl	8000564 <__aeabi_dmul>
 8006d40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006d48:	f04f 0803 	mov.w	r8, #3
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	2700      	movs	r7, #0
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8006d5c:	f7f9 fe6a 	bl	8000a34 <__aeabi_dcmpeq>
 8006d60:	b9b0      	cbnz	r0, 8006d90 <__ieee754_rem_pio2+0x3d8>
 8006d62:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <__ieee754_rem_pio2+0x3e0>)
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	2302      	movs	r3, #2
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	4621      	mov	r1, r4
 8006d70:	a806      	add	r0, sp, #24
 8006d72:	f000 f8dd 	bl	8006f30 <__kernel_rem_pio2>
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	f6bf ae58 	bge.w	8006a30 <__ieee754_rem_pio2+0x78>
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	68e3      	ldr	r3, [r4, #12]
 8006d8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d8e:	e746      	b.n	8006c1e <__ieee754_rem_pio2+0x266>
 8006d90:	46d0      	mov	r8, sl
 8006d92:	e7dd      	b.n	8006d50 <__ieee754_rem_pio2+0x398>
 8006d94:	41700000 	.word	0x41700000
 8006d98:	08007b14 	.word	0x08007b14
 8006d9c:	00000000 	.word	0x00000000

08006da0 <__kernel_cos>:
 8006da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	ec59 8b10 	vmov	r8, r9, d0
 8006da8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006dac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006db0:	ed2d 8b02 	vpush	{d8}
 8006db4:	eeb0 8a41 	vmov.f32	s16, s2
 8006db8:	eef0 8a61 	vmov.f32	s17, s3
 8006dbc:	da07      	bge.n	8006dce <__kernel_cos+0x2e>
 8006dbe:	ee10 0a10 	vmov	r0, s0
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	f7f9 fe68 	bl	8000a98 <__aeabi_d2iz>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f000 8089 	beq.w	8006ee0 <__kernel_cos+0x140>
 8006dce:	4642      	mov	r2, r8
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	f7f9 fbc5 	bl	8000564 <__aeabi_dmul>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4b4e      	ldr	r3, [pc, #312]	; (8006f18 <__kernel_cos+0x178>)
 8006dde:	4604      	mov	r4, r0
 8006de0:	460d      	mov	r5, r1
 8006de2:	f7f9 fbbf 	bl	8000564 <__aeabi_dmul>
 8006de6:	a340      	add	r3, pc, #256	; (adr r3, 8006ee8 <__kernel_cos+0x148>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	4682      	mov	sl, r0
 8006dee:	468b      	mov	fp, r1
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7f9 fbb6 	bl	8000564 <__aeabi_dmul>
 8006df8:	a33d      	add	r3, pc, #244	; (adr r3, 8006ef0 <__kernel_cos+0x150>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7f9 f9fb 	bl	80001f8 <__adddf3>
 8006e02:	4622      	mov	r2, r4
 8006e04:	462b      	mov	r3, r5
 8006e06:	f7f9 fbad 	bl	8000564 <__aeabi_dmul>
 8006e0a:	a33b      	add	r3, pc, #236	; (adr r3, 8006ef8 <__kernel_cos+0x158>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 f9f0 	bl	80001f4 <__aeabi_dsub>
 8006e14:	4622      	mov	r2, r4
 8006e16:	462b      	mov	r3, r5
 8006e18:	f7f9 fba4 	bl	8000564 <__aeabi_dmul>
 8006e1c:	a338      	add	r3, pc, #224	; (adr r3, 8006f00 <__kernel_cos+0x160>)
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f7f9 f9e9 	bl	80001f8 <__adddf3>
 8006e26:	4622      	mov	r2, r4
 8006e28:	462b      	mov	r3, r5
 8006e2a:	f7f9 fb9b 	bl	8000564 <__aeabi_dmul>
 8006e2e:	a336      	add	r3, pc, #216	; (adr r3, 8006f08 <__kernel_cos+0x168>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f7f9 f9de 	bl	80001f4 <__aeabi_dsub>
 8006e38:	4622      	mov	r2, r4
 8006e3a:	462b      	mov	r3, r5
 8006e3c:	f7f9 fb92 	bl	8000564 <__aeabi_dmul>
 8006e40:	a333      	add	r3, pc, #204	; (adr r3, 8006f10 <__kernel_cos+0x170>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 f9d7 	bl	80001f8 <__adddf3>
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	f7f9 fb89 	bl	8000564 <__aeabi_dmul>
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	f7f9 fb85 	bl	8000564 <__aeabi_dmul>
 8006e5a:	ec53 2b18 	vmov	r2, r3, d8
 8006e5e:	4604      	mov	r4, r0
 8006e60:	460d      	mov	r5, r1
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fb7d 	bl	8000564 <__aeabi_dmul>
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4620      	mov	r0, r4
 8006e72:	f7f9 f9bf 	bl	80001f4 <__aeabi_dsub>
 8006e76:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <__kernel_cos+0x17c>)
 8006e78:	429e      	cmp	r6, r3
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	4689      	mov	r9, r1
 8006e7e:	dc11      	bgt.n	8006ea4 <__kernel_cos+0x104>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4650      	mov	r0, sl
 8006e86:	4659      	mov	r1, fp
 8006e88:	f7f9 f9b4 	bl	80001f4 <__aeabi_dsub>
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4924      	ldr	r1, [pc, #144]	; (8006f20 <__kernel_cos+0x180>)
 8006e90:	4602      	mov	r2, r0
 8006e92:	2000      	movs	r0, #0
 8006e94:	f7f9 f9ae 	bl	80001f4 <__aeabi_dsub>
 8006e98:	ecbd 8b02 	vpop	{d8}
 8006e9c:	ec41 0b10 	vmov	d0, r0, r1
 8006ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <__kernel_cos+0x184>)
 8006ea6:	491e      	ldr	r1, [pc, #120]	; (8006f20 <__kernel_cos+0x180>)
 8006ea8:	429e      	cmp	r6, r3
 8006eaa:	bfcc      	ite	gt
 8006eac:	4d1e      	ldrgt	r5, [pc, #120]	; (8006f28 <__kernel_cos+0x188>)
 8006eae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f7f9 f99b 	bl	80001f4 <__aeabi_dsub>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	460f      	mov	r7, r1
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7f9 f993 	bl	80001f4 <__aeabi_dsub>
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	f7f9 f98f 	bl	80001f4 <__aeabi_dsub>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4630      	mov	r0, r6
 8006edc:	4639      	mov	r1, r7
 8006ede:	e7d9      	b.n	8006e94 <__kernel_cos+0xf4>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	490f      	ldr	r1, [pc, #60]	; (8006f20 <__kernel_cos+0x180>)
 8006ee4:	e7d8      	b.n	8006e98 <__kernel_cos+0xf8>
 8006ee6:	bf00      	nop
 8006ee8:	be8838d4 	.word	0xbe8838d4
 8006eec:	bda8fae9 	.word	0xbda8fae9
 8006ef0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ef4:	3e21ee9e 	.word	0x3e21ee9e
 8006ef8:	809c52ad 	.word	0x809c52ad
 8006efc:	3e927e4f 	.word	0x3e927e4f
 8006f00:	19cb1590 	.word	0x19cb1590
 8006f04:	3efa01a0 	.word	0x3efa01a0
 8006f08:	16c15177 	.word	0x16c15177
 8006f0c:	3f56c16c 	.word	0x3f56c16c
 8006f10:	5555554c 	.word	0x5555554c
 8006f14:	3fa55555 	.word	0x3fa55555
 8006f18:	3fe00000 	.word	0x3fe00000
 8006f1c:	3fd33332 	.word	0x3fd33332
 8006f20:	3ff00000 	.word	0x3ff00000
 8006f24:	3fe90000 	.word	0x3fe90000
 8006f28:	3fd20000 	.word	0x3fd20000
 8006f2c:	00000000 	.word	0x00000000

08006f30 <__kernel_rem_pio2>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	ed2d 8b02 	vpush	{d8}
 8006f38:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006f3c:	1ed4      	subs	r4, r2, #3
 8006f3e:	9308      	str	r3, [sp, #32]
 8006f40:	9101      	str	r1, [sp, #4]
 8006f42:	4bc5      	ldr	r3, [pc, #788]	; (8007258 <__kernel_rem_pio2+0x328>)
 8006f44:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006f46:	9009      	str	r0, [sp, #36]	; 0x24
 8006f48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f4c:	9304      	str	r3, [sp, #16]
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	9307      	str	r3, [sp, #28]
 8006f54:	2318      	movs	r3, #24
 8006f56:	fb94 f4f3 	sdiv	r4, r4, r3
 8006f5a:	f06f 0317 	mvn.w	r3, #23
 8006f5e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006f62:	fb04 3303 	mla	r3, r4, r3, r3
 8006f66:	eb03 0a02 	add.w	sl, r3, r2
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	9a07      	ldr	r2, [sp, #28]
 8006f6e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007248 <__kernel_rem_pio2+0x318>
 8006f72:	eb03 0802 	add.w	r8, r3, r2
 8006f76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006f78:	1aa7      	subs	r7, r4, r2
 8006f7a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006f7e:	ae22      	add	r6, sp, #136	; 0x88
 8006f80:	2500      	movs	r5, #0
 8006f82:	4545      	cmp	r5, r8
 8006f84:	dd13      	ble.n	8006fae <__kernel_rem_pio2+0x7e>
 8006f86:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007248 <__kernel_rem_pio2+0x318>
 8006f8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006f8e:	2600      	movs	r6, #0
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	429e      	cmp	r6, r3
 8006f94:	dc32      	bgt.n	8006ffc <__kernel_rem_pio2+0xcc>
 8006f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	199d      	adds	r5, r3, r6
 8006f9e:	ab22      	add	r3, sp, #136	; 0x88
 8006fa0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006fa4:	9306      	str	r3, [sp, #24]
 8006fa6:	ec59 8b18 	vmov	r8, r9, d8
 8006faa:	2700      	movs	r7, #0
 8006fac:	e01f      	b.n	8006fee <__kernel_rem_pio2+0xbe>
 8006fae:	42ef      	cmn	r7, r5
 8006fb0:	d407      	bmi.n	8006fc2 <__kernel_rem_pio2+0x92>
 8006fb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006fb6:	f7f9 fa6b 	bl	8000490 <__aeabi_i2d>
 8006fba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006fbe:	3501      	adds	r5, #1
 8006fc0:	e7df      	b.n	8006f82 <__kernel_rem_pio2+0x52>
 8006fc2:	ec51 0b18 	vmov	r0, r1, d8
 8006fc6:	e7f8      	b.n	8006fba <__kernel_rem_pio2+0x8a>
 8006fc8:	9906      	ldr	r1, [sp, #24]
 8006fca:	9d02      	ldr	r5, [sp, #8]
 8006fcc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006fd0:	9106      	str	r1, [sp, #24]
 8006fd2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006fd6:	9502      	str	r5, [sp, #8]
 8006fd8:	f7f9 fac4 	bl	8000564 <__aeabi_dmul>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 f908 	bl	80001f8 <__adddf3>
 8006fe8:	3701      	adds	r7, #1
 8006fea:	4680      	mov	r8, r0
 8006fec:	4689      	mov	r9, r1
 8006fee:	9b07      	ldr	r3, [sp, #28]
 8006ff0:	429f      	cmp	r7, r3
 8006ff2:	dde9      	ble.n	8006fc8 <__kernel_rem_pio2+0x98>
 8006ff4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	e7c9      	b.n	8006f90 <__kernel_rem_pio2+0x60>
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	aa0e      	add	r2, sp, #56	; 0x38
 8007000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007004:	930c      	str	r3, [sp, #48]	; 0x30
 8007006:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007008:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800700c:	9c04      	ldr	r4, [sp, #16]
 800700e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007010:	ab9a      	add	r3, sp, #616	; 0x268
 8007012:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007016:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800701a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800701e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007022:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007026:	ab9a      	add	r3, sp, #616	; 0x268
 8007028:	445b      	add	r3, fp
 800702a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800702e:	2500      	movs	r5, #0
 8007030:	1b63      	subs	r3, r4, r5
 8007032:	2b00      	cmp	r3, #0
 8007034:	dc78      	bgt.n	8007128 <__kernel_rem_pio2+0x1f8>
 8007036:	4650      	mov	r0, sl
 8007038:	ec49 8b10 	vmov	d0, r8, r9
 800703c:	f000 fc00 	bl	8007840 <scalbn>
 8007040:	ec57 6b10 	vmov	r6, r7, d0
 8007044:	2200      	movs	r2, #0
 8007046:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800704a:	ee10 0a10 	vmov	r0, s0
 800704e:	4639      	mov	r1, r7
 8007050:	f7f9 fa88 	bl	8000564 <__aeabi_dmul>
 8007054:	ec41 0b10 	vmov	d0, r0, r1
 8007058:	f000 fb6e 	bl	8007738 <floor>
 800705c:	2200      	movs	r2, #0
 800705e:	ec51 0b10 	vmov	r0, r1, d0
 8007062:	4b7e      	ldr	r3, [pc, #504]	; (800725c <__kernel_rem_pio2+0x32c>)
 8007064:	f7f9 fa7e 	bl	8000564 <__aeabi_dmul>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4630      	mov	r0, r6
 800706e:	4639      	mov	r1, r7
 8007070:	f7f9 f8c0 	bl	80001f4 <__aeabi_dsub>
 8007074:	460f      	mov	r7, r1
 8007076:	4606      	mov	r6, r0
 8007078:	f7f9 fd0e 	bl	8000a98 <__aeabi_d2iz>
 800707c:	9006      	str	r0, [sp, #24]
 800707e:	f7f9 fa07 	bl	8000490 <__aeabi_i2d>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4630      	mov	r0, r6
 8007088:	4639      	mov	r1, r7
 800708a:	f7f9 f8b3 	bl	80001f4 <__aeabi_dsub>
 800708e:	f1ba 0f00 	cmp.w	sl, #0
 8007092:	4606      	mov	r6, r0
 8007094:	460f      	mov	r7, r1
 8007096:	dd6c      	ble.n	8007172 <__kernel_rem_pio2+0x242>
 8007098:	1e62      	subs	r2, r4, #1
 800709a:	ab0e      	add	r3, sp, #56	; 0x38
 800709c:	f1ca 0118 	rsb	r1, sl, #24
 80070a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80070a4:	9d06      	ldr	r5, [sp, #24]
 80070a6:	fa40 f301 	asr.w	r3, r0, r1
 80070aa:	441d      	add	r5, r3
 80070ac:	408b      	lsls	r3, r1
 80070ae:	1ac0      	subs	r0, r0, r3
 80070b0:	ab0e      	add	r3, sp, #56	; 0x38
 80070b2:	9506      	str	r5, [sp, #24]
 80070b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80070b8:	f1ca 0317 	rsb	r3, sl, #23
 80070bc:	fa40 f303 	asr.w	r3, r0, r3
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	9b02      	ldr	r3, [sp, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dd62      	ble.n	800718e <__kernel_rem_pio2+0x25e>
 80070c8:	9b06      	ldr	r3, [sp, #24]
 80070ca:	2200      	movs	r2, #0
 80070cc:	3301      	adds	r3, #1
 80070ce:	9306      	str	r3, [sp, #24]
 80070d0:	4615      	mov	r5, r2
 80070d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80070d6:	4294      	cmp	r4, r2
 80070d8:	f300 8095 	bgt.w	8007206 <__kernel_rem_pio2+0x2d6>
 80070dc:	f1ba 0f00 	cmp.w	sl, #0
 80070e0:	dd07      	ble.n	80070f2 <__kernel_rem_pio2+0x1c2>
 80070e2:	f1ba 0f01 	cmp.w	sl, #1
 80070e6:	f000 80a2 	beq.w	800722e <__kernel_rem_pio2+0x2fe>
 80070ea:	f1ba 0f02 	cmp.w	sl, #2
 80070ee:	f000 80c1 	beq.w	8007274 <__kernel_rem_pio2+0x344>
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d14a      	bne.n	800718e <__kernel_rem_pio2+0x25e>
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	2000      	movs	r0, #0
 80070fe:	4958      	ldr	r1, [pc, #352]	; (8007260 <__kernel_rem_pio2+0x330>)
 8007100:	f7f9 f878 	bl	80001f4 <__aeabi_dsub>
 8007104:	4606      	mov	r6, r0
 8007106:	460f      	mov	r7, r1
 8007108:	2d00      	cmp	r5, #0
 800710a:	d040      	beq.n	800718e <__kernel_rem_pio2+0x25e>
 800710c:	4650      	mov	r0, sl
 800710e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007250 <__kernel_rem_pio2+0x320>
 8007112:	f000 fb95 	bl	8007840 <scalbn>
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	ec53 2b10 	vmov	r2, r3, d0
 800711e:	f7f9 f869 	bl	80001f4 <__aeabi_dsub>
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	e032      	b.n	800718e <__kernel_rem_pio2+0x25e>
 8007128:	2200      	movs	r2, #0
 800712a:	4b4e      	ldr	r3, [pc, #312]	; (8007264 <__kernel_rem_pio2+0x334>)
 800712c:	4640      	mov	r0, r8
 800712e:	4649      	mov	r1, r9
 8007130:	f7f9 fa18 	bl	8000564 <__aeabi_dmul>
 8007134:	f7f9 fcb0 	bl	8000a98 <__aeabi_d2iz>
 8007138:	f7f9 f9aa 	bl	8000490 <__aeabi_i2d>
 800713c:	2200      	movs	r2, #0
 800713e:	4b4a      	ldr	r3, [pc, #296]	; (8007268 <__kernel_rem_pio2+0x338>)
 8007140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007144:	f7f9 fa0e 	bl	8000564 <__aeabi_dmul>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 f850 	bl	80001f4 <__aeabi_dsub>
 8007154:	f7f9 fca0 	bl	8000a98 <__aeabi_d2iz>
 8007158:	ab0e      	add	r3, sp, #56	; 0x38
 800715a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800715e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007166:	f7f9 f847 	bl	80001f8 <__adddf3>
 800716a:	3501      	adds	r5, #1
 800716c:	4680      	mov	r8, r0
 800716e:	4689      	mov	r9, r1
 8007170:	e75e      	b.n	8007030 <__kernel_rem_pio2+0x100>
 8007172:	d105      	bne.n	8007180 <__kernel_rem_pio2+0x250>
 8007174:	1e63      	subs	r3, r4, #1
 8007176:	aa0e      	add	r2, sp, #56	; 0x38
 8007178:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800717c:	15c3      	asrs	r3, r0, #23
 800717e:	e79f      	b.n	80070c0 <__kernel_rem_pio2+0x190>
 8007180:	2200      	movs	r2, #0
 8007182:	4b3a      	ldr	r3, [pc, #232]	; (800726c <__kernel_rem_pio2+0x33c>)
 8007184:	f7f9 fc74 	bl	8000a70 <__aeabi_dcmpge>
 8007188:	2800      	cmp	r0, #0
 800718a:	d139      	bne.n	8007200 <__kernel_rem_pio2+0x2d0>
 800718c:	9002      	str	r0, [sp, #8]
 800718e:	2200      	movs	r2, #0
 8007190:	2300      	movs	r3, #0
 8007192:	4630      	mov	r0, r6
 8007194:	4639      	mov	r1, r7
 8007196:	f7f9 fc4d 	bl	8000a34 <__aeabi_dcmpeq>
 800719a:	2800      	cmp	r0, #0
 800719c:	f000 80c7 	beq.w	800732e <__kernel_rem_pio2+0x3fe>
 80071a0:	1e65      	subs	r5, r4, #1
 80071a2:	462b      	mov	r3, r5
 80071a4:	2200      	movs	r2, #0
 80071a6:	9904      	ldr	r1, [sp, #16]
 80071a8:	428b      	cmp	r3, r1
 80071aa:	da6a      	bge.n	8007282 <__kernel_rem_pio2+0x352>
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	f000 8088 	beq.w	80072c2 <__kernel_rem_pio2+0x392>
 80071b2:	ab0e      	add	r3, sp, #56	; 0x38
 80071b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80071b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80b4 	beq.w	800732a <__kernel_rem_pio2+0x3fa>
 80071c2:	4650      	mov	r0, sl
 80071c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007250 <__kernel_rem_pio2+0x320>
 80071c8:	f000 fb3a 	bl	8007840 <scalbn>
 80071cc:	00ec      	lsls	r4, r5, #3
 80071ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80071d0:	191e      	adds	r6, r3, r4
 80071d2:	ec59 8b10 	vmov	r8, r9, d0
 80071d6:	f106 0a08 	add.w	sl, r6, #8
 80071da:	462f      	mov	r7, r5
 80071dc:	2f00      	cmp	r7, #0
 80071de:	f280 80df 	bge.w	80073a0 <__kernel_rem_pio2+0x470>
 80071e2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007248 <__kernel_rem_pio2+0x318>
 80071e6:	f04f 0a00 	mov.w	sl, #0
 80071ea:	eba5 030a 	sub.w	r3, r5, sl
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f2c0 810a 	blt.w	8007408 <__kernel_rem_pio2+0x4d8>
 80071f4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007270 <__kernel_rem_pio2+0x340>
 80071f8:	ec59 8b18 	vmov	r8, r9, d8
 80071fc:	2700      	movs	r7, #0
 80071fe:	e0f5      	b.n	80073ec <__kernel_rem_pio2+0x4bc>
 8007200:	2302      	movs	r3, #2
 8007202:	9302      	str	r3, [sp, #8]
 8007204:	e760      	b.n	80070c8 <__kernel_rem_pio2+0x198>
 8007206:	ab0e      	add	r3, sp, #56	; 0x38
 8007208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720c:	b94d      	cbnz	r5, 8007222 <__kernel_rem_pio2+0x2f2>
 800720e:	b12b      	cbz	r3, 800721c <__kernel_rem_pio2+0x2ec>
 8007210:	a80e      	add	r0, sp, #56	; 0x38
 8007212:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007216:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800721a:	2301      	movs	r3, #1
 800721c:	3201      	adds	r2, #1
 800721e:	461d      	mov	r5, r3
 8007220:	e759      	b.n	80070d6 <__kernel_rem_pio2+0x1a6>
 8007222:	a80e      	add	r0, sp, #56	; 0x38
 8007224:	1acb      	subs	r3, r1, r3
 8007226:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800722a:	462b      	mov	r3, r5
 800722c:	e7f6      	b.n	800721c <__kernel_rem_pio2+0x2ec>
 800722e:	1e62      	subs	r2, r4, #1
 8007230:	ab0e      	add	r3, sp, #56	; 0x38
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800723a:	a90e      	add	r1, sp, #56	; 0x38
 800723c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007240:	e757      	b.n	80070f2 <__kernel_rem_pio2+0x1c2>
 8007242:	bf00      	nop
 8007244:	f3af 8000 	nop.w
	...
 8007254:	3ff00000 	.word	0x3ff00000
 8007258:	08007c60 	.word	0x08007c60
 800725c:	40200000 	.word	0x40200000
 8007260:	3ff00000 	.word	0x3ff00000
 8007264:	3e700000 	.word	0x3e700000
 8007268:	41700000 	.word	0x41700000
 800726c:	3fe00000 	.word	0x3fe00000
 8007270:	08007c20 	.word	0x08007c20
 8007274:	1e62      	subs	r2, r4, #1
 8007276:	ab0e      	add	r3, sp, #56	; 0x38
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007280:	e7db      	b.n	800723a <__kernel_rem_pio2+0x30a>
 8007282:	a90e      	add	r1, sp, #56	; 0x38
 8007284:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007288:	3b01      	subs	r3, #1
 800728a:	430a      	orrs	r2, r1
 800728c:	e78b      	b.n	80071a6 <__kernel_rem_pio2+0x276>
 800728e:	3301      	adds	r3, #1
 8007290:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007294:	2900      	cmp	r1, #0
 8007296:	d0fa      	beq.n	800728e <__kernel_rem_pio2+0x35e>
 8007298:	9a08      	ldr	r2, [sp, #32]
 800729a:	4422      	add	r2, r4
 800729c:	00d2      	lsls	r2, r2, #3
 800729e:	a922      	add	r1, sp, #136	; 0x88
 80072a0:	18e3      	adds	r3, r4, r3
 80072a2:	9206      	str	r2, [sp, #24]
 80072a4:	440a      	add	r2, r1
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	f10b 0108 	add.w	r1, fp, #8
 80072ac:	f102 0308 	add.w	r3, r2, #8
 80072b0:	1c66      	adds	r6, r4, #1
 80072b2:	910a      	str	r1, [sp, #40]	; 0x28
 80072b4:	2500      	movs	r5, #0
 80072b6:	930d      	str	r3, [sp, #52]	; 0x34
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	42b3      	cmp	r3, r6
 80072bc:	da04      	bge.n	80072c8 <__kernel_rem_pio2+0x398>
 80072be:	461c      	mov	r4, r3
 80072c0:	e6a6      	b.n	8007010 <__kernel_rem_pio2+0xe0>
 80072c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c4:	2301      	movs	r3, #1
 80072c6:	e7e3      	b.n	8007290 <__kernel_rem_pio2+0x360>
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	18ef      	adds	r7, r5, r3
 80072cc:	ab22      	add	r3, sp, #136	; 0x88
 80072ce:	441f      	add	r7, r3
 80072d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072d6:	f7f9 f8db 	bl	8000490 <__aeabi_i2d>
 80072da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072dc:	461c      	mov	r4, r3
 80072de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e0:	e9c7 0100 	strd	r0, r1, [r7]
 80072e4:	eb03 0b05 	add.w	fp, r3, r5
 80072e8:	2700      	movs	r7, #0
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	f04f 0900 	mov.w	r9, #0
 80072f2:	9b07      	ldr	r3, [sp, #28]
 80072f4:	429f      	cmp	r7, r3
 80072f6:	dd08      	ble.n	800730a <__kernel_rem_pio2+0x3da>
 80072f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fa:	aa72      	add	r2, sp, #456	; 0x1c8
 80072fc:	18eb      	adds	r3, r5, r3
 80072fe:	4413      	add	r3, r2
 8007300:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007304:	3601      	adds	r6, #1
 8007306:	3508      	adds	r5, #8
 8007308:	e7d6      	b.n	80072b8 <__kernel_rem_pio2+0x388>
 800730a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800730e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007312:	f7f9 f927 	bl	8000564 <__aeabi_dmul>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	f7f8 ff6b 	bl	80001f8 <__adddf3>
 8007322:	3701      	adds	r7, #1
 8007324:	4680      	mov	r8, r0
 8007326:	4689      	mov	r9, r1
 8007328:	e7e3      	b.n	80072f2 <__kernel_rem_pio2+0x3c2>
 800732a:	3d01      	subs	r5, #1
 800732c:	e741      	b.n	80071b2 <__kernel_rem_pio2+0x282>
 800732e:	f1ca 0000 	rsb	r0, sl, #0
 8007332:	ec47 6b10 	vmov	d0, r6, r7
 8007336:	f000 fa83 	bl	8007840 <scalbn>
 800733a:	ec57 6b10 	vmov	r6, r7, d0
 800733e:	2200      	movs	r2, #0
 8007340:	4b99      	ldr	r3, [pc, #612]	; (80075a8 <__kernel_rem_pio2+0x678>)
 8007342:	ee10 0a10 	vmov	r0, s0
 8007346:	4639      	mov	r1, r7
 8007348:	f7f9 fb92 	bl	8000a70 <__aeabi_dcmpge>
 800734c:	b1f8      	cbz	r0, 800738e <__kernel_rem_pio2+0x45e>
 800734e:	2200      	movs	r2, #0
 8007350:	4b96      	ldr	r3, [pc, #600]	; (80075ac <__kernel_rem_pio2+0x67c>)
 8007352:	4630      	mov	r0, r6
 8007354:	4639      	mov	r1, r7
 8007356:	f7f9 f905 	bl	8000564 <__aeabi_dmul>
 800735a:	f7f9 fb9d 	bl	8000a98 <__aeabi_d2iz>
 800735e:	4680      	mov	r8, r0
 8007360:	f7f9 f896 	bl	8000490 <__aeabi_i2d>
 8007364:	2200      	movs	r2, #0
 8007366:	4b90      	ldr	r3, [pc, #576]	; (80075a8 <__kernel_rem_pio2+0x678>)
 8007368:	f7f9 f8fc 	bl	8000564 <__aeabi_dmul>
 800736c:	460b      	mov	r3, r1
 800736e:	4602      	mov	r2, r0
 8007370:	4639      	mov	r1, r7
 8007372:	4630      	mov	r0, r6
 8007374:	f7f8 ff3e 	bl	80001f4 <__aeabi_dsub>
 8007378:	f7f9 fb8e 	bl	8000a98 <__aeabi_d2iz>
 800737c:	1c65      	adds	r5, r4, #1
 800737e:	ab0e      	add	r3, sp, #56	; 0x38
 8007380:	f10a 0a18 	add.w	sl, sl, #24
 8007384:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007388:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800738c:	e719      	b.n	80071c2 <__kernel_rem_pio2+0x292>
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	f7f9 fb81 	bl	8000a98 <__aeabi_d2iz>
 8007396:	ab0e      	add	r3, sp, #56	; 0x38
 8007398:	4625      	mov	r5, r4
 800739a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800739e:	e710      	b.n	80071c2 <__kernel_rem_pio2+0x292>
 80073a0:	ab0e      	add	r3, sp, #56	; 0x38
 80073a2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80073a6:	f7f9 f873 	bl	8000490 <__aeabi_i2d>
 80073aa:	4642      	mov	r2, r8
 80073ac:	464b      	mov	r3, r9
 80073ae:	f7f9 f8d9 	bl	8000564 <__aeabi_dmul>
 80073b2:	2200      	movs	r2, #0
 80073b4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80073b8:	4b7c      	ldr	r3, [pc, #496]	; (80075ac <__kernel_rem_pio2+0x67c>)
 80073ba:	4640      	mov	r0, r8
 80073bc:	4649      	mov	r1, r9
 80073be:	f7f9 f8d1 	bl	8000564 <__aeabi_dmul>
 80073c2:	3f01      	subs	r7, #1
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	e708      	b.n	80071dc <__kernel_rem_pio2+0x2ac>
 80073ca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80073d6:	f7f9 f8c5 	bl	8000564 <__aeabi_dmul>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f8 ff09 	bl	80001f8 <__adddf3>
 80073e6:	3701      	adds	r7, #1
 80073e8:	4680      	mov	r8, r0
 80073ea:	4689      	mov	r9, r1
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	429f      	cmp	r7, r3
 80073f0:	dc01      	bgt.n	80073f6 <__kernel_rem_pio2+0x4c6>
 80073f2:	45ba      	cmp	sl, r7
 80073f4:	dae9      	bge.n	80073ca <__kernel_rem_pio2+0x49a>
 80073f6:	ab4a      	add	r3, sp, #296	; 0x128
 80073f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073fc:	e9c3 8900 	strd	r8, r9, [r3]
 8007400:	f10a 0a01 	add.w	sl, sl, #1
 8007404:	3e08      	subs	r6, #8
 8007406:	e6f0      	b.n	80071ea <__kernel_rem_pio2+0x2ba>
 8007408:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800740a:	2b03      	cmp	r3, #3
 800740c:	d85b      	bhi.n	80074c6 <__kernel_rem_pio2+0x596>
 800740e:	e8df f003 	tbb	[pc, r3]
 8007412:	264a      	.short	0x264a
 8007414:	0226      	.short	0x0226
 8007416:	ab9a      	add	r3, sp, #616	; 0x268
 8007418:	441c      	add	r4, r3
 800741a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800741e:	46a2      	mov	sl, r4
 8007420:	46ab      	mov	fp, r5
 8007422:	f1bb 0f00 	cmp.w	fp, #0
 8007426:	dc6c      	bgt.n	8007502 <__kernel_rem_pio2+0x5d2>
 8007428:	46a2      	mov	sl, r4
 800742a:	46ab      	mov	fp, r5
 800742c:	f1bb 0f01 	cmp.w	fp, #1
 8007430:	f300 8086 	bgt.w	8007540 <__kernel_rem_pio2+0x610>
 8007434:	2000      	movs	r0, #0
 8007436:	2100      	movs	r1, #0
 8007438:	2d01      	cmp	r5, #1
 800743a:	f300 80a0 	bgt.w	800757e <__kernel_rem_pio2+0x64e>
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007444:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 809e 	bne.w	800758a <__kernel_rem_pio2+0x65a>
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	e9c3 7800 	strd	r7, r8, [r3]
 8007454:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007458:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800745c:	e033      	b.n	80074c6 <__kernel_rem_pio2+0x596>
 800745e:	3408      	adds	r4, #8
 8007460:	ab4a      	add	r3, sp, #296	; 0x128
 8007462:	441c      	add	r4, r3
 8007464:	462e      	mov	r6, r5
 8007466:	2000      	movs	r0, #0
 8007468:	2100      	movs	r1, #0
 800746a:	2e00      	cmp	r6, #0
 800746c:	da3a      	bge.n	80074e4 <__kernel_rem_pio2+0x5b4>
 800746e:	9b02      	ldr	r3, [sp, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d03d      	beq.n	80074f0 <__kernel_rem_pio2+0x5c0>
 8007474:	4602      	mov	r2, r0
 8007476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800747a:	9c01      	ldr	r4, [sp, #4]
 800747c:	e9c4 2300 	strd	r2, r3, [r4]
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007488:	f7f8 feb4 	bl	80001f4 <__aeabi_dsub>
 800748c:	ae4c      	add	r6, sp, #304	; 0x130
 800748e:	2401      	movs	r4, #1
 8007490:	42a5      	cmp	r5, r4
 8007492:	da30      	bge.n	80074f6 <__kernel_rem_pio2+0x5c6>
 8007494:	9b02      	ldr	r3, [sp, #8]
 8007496:	b113      	cbz	r3, 800749e <__kernel_rem_pio2+0x56e>
 8007498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800749c:	4619      	mov	r1, r3
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80074a4:	e00f      	b.n	80074c6 <__kernel_rem_pio2+0x596>
 80074a6:	ab9a      	add	r3, sp, #616	; 0x268
 80074a8:	441c      	add	r4, r3
 80074aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80074ae:	2000      	movs	r0, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	da10      	bge.n	80074d8 <__kernel_rem_pio2+0x5a8>
 80074b6:	9b02      	ldr	r3, [sp, #8]
 80074b8:	b113      	cbz	r3, 80074c0 <__kernel_rem_pio2+0x590>
 80074ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074be:	4619      	mov	r1, r3
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	e9c3 0100 	strd	r0, r1, [r3]
 80074c6:	9b06      	ldr	r3, [sp, #24]
 80074c8:	f003 0007 	and.w	r0, r3, #7
 80074cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80074d0:	ecbd 8b02 	vpop	{d8}
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80074dc:	f7f8 fe8c 	bl	80001f8 <__adddf3>
 80074e0:	3d01      	subs	r5, #1
 80074e2:	e7e6      	b.n	80074b2 <__kernel_rem_pio2+0x582>
 80074e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80074e8:	f7f8 fe86 	bl	80001f8 <__adddf3>
 80074ec:	3e01      	subs	r6, #1
 80074ee:	e7bc      	b.n	800746a <__kernel_rem_pio2+0x53a>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	e7c1      	b.n	800747a <__kernel_rem_pio2+0x54a>
 80074f6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80074fa:	f7f8 fe7d 	bl	80001f8 <__adddf3>
 80074fe:	3401      	adds	r4, #1
 8007500:	e7c6      	b.n	8007490 <__kernel_rem_pio2+0x560>
 8007502:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007506:	ed3a 7b02 	vldmdb	sl!, {d7}
 800750a:	4640      	mov	r0, r8
 800750c:	ec53 2b17 	vmov	r2, r3, d7
 8007510:	4649      	mov	r1, r9
 8007512:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007516:	f7f8 fe6f 	bl	80001f8 <__adddf3>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4606      	mov	r6, r0
 8007520:	460f      	mov	r7, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 fe65 	bl	80001f4 <__aeabi_dsub>
 800752a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800752e:	f7f8 fe63 	bl	80001f8 <__adddf3>
 8007532:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007536:	e9ca 0100 	strd	r0, r1, [sl]
 800753a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800753e:	e770      	b.n	8007422 <__kernel_rem_pio2+0x4f2>
 8007540:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007544:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007548:	4630      	mov	r0, r6
 800754a:	ec53 2b17 	vmov	r2, r3, d7
 800754e:	4639      	mov	r1, r7
 8007550:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007554:	f7f8 fe50 	bl	80001f8 <__adddf3>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f8 fe46 	bl	80001f4 <__aeabi_dsub>
 8007568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800756c:	f7f8 fe44 	bl	80001f8 <__adddf3>
 8007570:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007574:	e9ca 0100 	strd	r0, r1, [sl]
 8007578:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800757c:	e756      	b.n	800742c <__kernel_rem_pio2+0x4fc>
 800757e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007582:	f7f8 fe39 	bl	80001f8 <__adddf3>
 8007586:	3d01      	subs	r5, #1
 8007588:	e756      	b.n	8007438 <__kernel_rem_pio2+0x508>
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	9a01      	ldr	r2, [sp, #4]
 800758e:	601f      	str	r7, [r3, #0]
 8007590:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007594:	605c      	str	r4, [r3, #4]
 8007596:	609d      	str	r5, [r3, #8]
 8007598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800759c:	60d3      	str	r3, [r2, #12]
 800759e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a2:	6110      	str	r0, [r2, #16]
 80075a4:	6153      	str	r3, [r2, #20]
 80075a6:	e78e      	b.n	80074c6 <__kernel_rem_pio2+0x596>
 80075a8:	41700000 	.word	0x41700000
 80075ac:	3e700000 	.word	0x3e700000

080075b0 <__kernel_sin>:
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	ec55 4b10 	vmov	r4, r5, d0
 80075b8:	b085      	sub	sp, #20
 80075ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80075c2:	ed8d 1b00 	vstr	d1, [sp]
 80075c6:	9002      	str	r0, [sp, #8]
 80075c8:	da06      	bge.n	80075d8 <__kernel_sin+0x28>
 80075ca:	ee10 0a10 	vmov	r0, s0
 80075ce:	4629      	mov	r1, r5
 80075d0:	f7f9 fa62 	bl	8000a98 <__aeabi_d2iz>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d051      	beq.n	800767c <__kernel_sin+0xcc>
 80075d8:	4622      	mov	r2, r4
 80075da:	462b      	mov	r3, r5
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 ffc0 	bl	8000564 <__aeabi_dmul>
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f8 ffb8 	bl	8000564 <__aeabi_dmul>
 80075f4:	a341      	add	r3, pc, #260	; (adr r3, 80076fc <__kernel_sin+0x14c>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	4680      	mov	r8, r0
 80075fc:	4689      	mov	r9, r1
 80075fe:	4650      	mov	r0, sl
 8007600:	4659      	mov	r1, fp
 8007602:	f7f8 ffaf 	bl	8000564 <__aeabi_dmul>
 8007606:	a33f      	add	r3, pc, #252	; (adr r3, 8007704 <__kernel_sin+0x154>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fdf2 	bl	80001f4 <__aeabi_dsub>
 8007610:	4652      	mov	r2, sl
 8007612:	465b      	mov	r3, fp
 8007614:	f7f8 ffa6 	bl	8000564 <__aeabi_dmul>
 8007618:	a33c      	add	r3, pc, #240	; (adr r3, 800770c <__kernel_sin+0x15c>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fdeb 	bl	80001f8 <__adddf3>
 8007622:	4652      	mov	r2, sl
 8007624:	465b      	mov	r3, fp
 8007626:	f7f8 ff9d 	bl	8000564 <__aeabi_dmul>
 800762a:	a33a      	add	r3, pc, #232	; (adr r3, 8007714 <__kernel_sin+0x164>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fde0 	bl	80001f4 <__aeabi_dsub>
 8007634:	4652      	mov	r2, sl
 8007636:	465b      	mov	r3, fp
 8007638:	f7f8 ff94 	bl	8000564 <__aeabi_dmul>
 800763c:	a337      	add	r3, pc, #220	; (adr r3, 800771c <__kernel_sin+0x16c>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f8 fdd9 	bl	80001f8 <__adddf3>
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	4606      	mov	r6, r0
 800764a:	460f      	mov	r7, r1
 800764c:	b9db      	cbnz	r3, 8007686 <__kernel_sin+0xd6>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4650      	mov	r0, sl
 8007654:	4659      	mov	r1, fp
 8007656:	f7f8 ff85 	bl	8000564 <__aeabi_dmul>
 800765a:	a325      	add	r3, pc, #148	; (adr r3, 80076f0 <__kernel_sin+0x140>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f8 fdc8 	bl	80001f4 <__aeabi_dsub>
 8007664:	4642      	mov	r2, r8
 8007666:	464b      	mov	r3, r9
 8007668:	f7f8 ff7c 	bl	8000564 <__aeabi_dmul>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4620      	mov	r0, r4
 8007672:	4629      	mov	r1, r5
 8007674:	f7f8 fdc0 	bl	80001f8 <__adddf3>
 8007678:	4604      	mov	r4, r0
 800767a:	460d      	mov	r5, r1
 800767c:	ec45 4b10 	vmov	d0, r4, r5
 8007680:	b005      	add	sp, #20
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	2200      	movs	r2, #0
 8007688:	4b1b      	ldr	r3, [pc, #108]	; (80076f8 <__kernel_sin+0x148>)
 800768a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800768e:	f7f8 ff69 	bl	8000564 <__aeabi_dmul>
 8007692:	4632      	mov	r2, r6
 8007694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007698:	463b      	mov	r3, r7
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f8 ff61 	bl	8000564 <__aeabi_dmul>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076aa:	f7f8 fda3 	bl	80001f4 <__aeabi_dsub>
 80076ae:	4652      	mov	r2, sl
 80076b0:	465b      	mov	r3, fp
 80076b2:	f7f8 ff57 	bl	8000564 <__aeabi_dmul>
 80076b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ba:	f7f8 fd9b 	bl	80001f4 <__aeabi_dsub>
 80076be:	a30c      	add	r3, pc, #48	; (adr r3, 80076f0 <__kernel_sin+0x140>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	4640      	mov	r0, r8
 80076ca:	4649      	mov	r1, r9
 80076cc:	f7f8 ff4a 	bl	8000564 <__aeabi_dmul>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4630      	mov	r0, r6
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f8 fd8e 	bl	80001f8 <__adddf3>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4620      	mov	r0, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	f7f8 fd86 	bl	80001f4 <__aeabi_dsub>
 80076e8:	e7c6      	b.n	8007678 <__kernel_sin+0xc8>
 80076ea:	bf00      	nop
 80076ec:	f3af 8000 	nop.w
 80076f0:	55555549 	.word	0x55555549
 80076f4:	3fc55555 	.word	0x3fc55555
 80076f8:	3fe00000 	.word	0x3fe00000
 80076fc:	5acfd57c 	.word	0x5acfd57c
 8007700:	3de5d93a 	.word	0x3de5d93a
 8007704:	8a2b9ceb 	.word	0x8a2b9ceb
 8007708:	3e5ae5e6 	.word	0x3e5ae5e6
 800770c:	57b1fe7d 	.word	0x57b1fe7d
 8007710:	3ec71de3 	.word	0x3ec71de3
 8007714:	19c161d5 	.word	0x19c161d5
 8007718:	3f2a01a0 	.word	0x3f2a01a0
 800771c:	1110f8a6 	.word	0x1110f8a6
 8007720:	3f811111 	.word	0x3f811111

08007724 <fabs>:
 8007724:	ec51 0b10 	vmov	r0, r1, d0
 8007728:	ee10 2a10 	vmov	r2, s0
 800772c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007730:	ec43 2b10 	vmov	d0, r2, r3
 8007734:	4770      	bx	lr
	...

08007738 <floor>:
 8007738:	ec51 0b10 	vmov	r0, r1, d0
 800773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007740:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007744:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007748:	2e13      	cmp	r6, #19
 800774a:	460c      	mov	r4, r1
 800774c:	ee10 5a10 	vmov	r5, s0
 8007750:	4680      	mov	r8, r0
 8007752:	dc34      	bgt.n	80077be <floor+0x86>
 8007754:	2e00      	cmp	r6, #0
 8007756:	da16      	bge.n	8007786 <floor+0x4e>
 8007758:	a335      	add	r3, pc, #212	; (adr r3, 8007830 <floor+0xf8>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f8 fd4b 	bl	80001f8 <__adddf3>
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	f7f9 f98d 	bl	8000a84 <__aeabi_dcmpgt>
 800776a:	b148      	cbz	r0, 8007780 <floor+0x48>
 800776c:	2c00      	cmp	r4, #0
 800776e:	da59      	bge.n	8007824 <floor+0xec>
 8007770:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007774:	4a30      	ldr	r2, [pc, #192]	; (8007838 <floor+0x100>)
 8007776:	432b      	orrs	r3, r5
 8007778:	2500      	movs	r5, #0
 800777a:	42ab      	cmp	r3, r5
 800777c:	bf18      	it	ne
 800777e:	4614      	movne	r4, r2
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	e025      	b.n	80077d2 <floor+0x9a>
 8007786:	4f2d      	ldr	r7, [pc, #180]	; (800783c <floor+0x104>)
 8007788:	4137      	asrs	r7, r6
 800778a:	ea01 0307 	and.w	r3, r1, r7
 800778e:	4303      	orrs	r3, r0
 8007790:	d01f      	beq.n	80077d2 <floor+0x9a>
 8007792:	a327      	add	r3, pc, #156	; (adr r3, 8007830 <floor+0xf8>)
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f7f8 fd2e 	bl	80001f8 <__adddf3>
 800779c:	2200      	movs	r2, #0
 800779e:	2300      	movs	r3, #0
 80077a0:	f7f9 f970 	bl	8000a84 <__aeabi_dcmpgt>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d0eb      	beq.n	8007780 <floor+0x48>
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	bfbe      	ittt	lt
 80077ac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80077b0:	fa43 f606 	asrlt.w	r6, r3, r6
 80077b4:	19a4      	addlt	r4, r4, r6
 80077b6:	ea24 0407 	bic.w	r4, r4, r7
 80077ba:	2500      	movs	r5, #0
 80077bc:	e7e0      	b.n	8007780 <floor+0x48>
 80077be:	2e33      	cmp	r6, #51	; 0x33
 80077c0:	dd0b      	ble.n	80077da <floor+0xa2>
 80077c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80077c6:	d104      	bne.n	80077d2 <floor+0x9a>
 80077c8:	ee10 2a10 	vmov	r2, s0
 80077cc:	460b      	mov	r3, r1
 80077ce:	f7f8 fd13 	bl	80001f8 <__adddf3>
 80077d2:	ec41 0b10 	vmov	d0, r0, r1
 80077d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077da:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	fa23 f707 	lsr.w	r7, r3, r7
 80077e6:	4207      	tst	r7, r0
 80077e8:	d0f3      	beq.n	80077d2 <floor+0x9a>
 80077ea:	a311      	add	r3, pc, #68	; (adr r3, 8007830 <floor+0xf8>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 fd02 	bl	80001f8 <__adddf3>
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	f7f9 f944 	bl	8000a84 <__aeabi_dcmpgt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d0bf      	beq.n	8007780 <floor+0x48>
 8007800:	2c00      	cmp	r4, #0
 8007802:	da02      	bge.n	800780a <floor+0xd2>
 8007804:	2e14      	cmp	r6, #20
 8007806:	d103      	bne.n	8007810 <floor+0xd8>
 8007808:	3401      	adds	r4, #1
 800780a:	ea25 0507 	bic.w	r5, r5, r7
 800780e:	e7b7      	b.n	8007780 <floor+0x48>
 8007810:	2301      	movs	r3, #1
 8007812:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007816:	fa03 f606 	lsl.w	r6, r3, r6
 800781a:	4435      	add	r5, r6
 800781c:	4545      	cmp	r5, r8
 800781e:	bf38      	it	cc
 8007820:	18e4      	addcc	r4, r4, r3
 8007822:	e7f2      	b.n	800780a <floor+0xd2>
 8007824:	2500      	movs	r5, #0
 8007826:	462c      	mov	r4, r5
 8007828:	e7aa      	b.n	8007780 <floor+0x48>
 800782a:	bf00      	nop
 800782c:	f3af 8000 	nop.w
 8007830:	8800759c 	.word	0x8800759c
 8007834:	7e37e43c 	.word	0x7e37e43c
 8007838:	bff00000 	.word	0xbff00000
 800783c:	000fffff 	.word	0x000fffff

08007840 <scalbn>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	ec55 4b10 	vmov	r4, r5, d0
 8007846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800784a:	4606      	mov	r6, r0
 800784c:	462b      	mov	r3, r5
 800784e:	b9aa      	cbnz	r2, 800787c <scalbn+0x3c>
 8007850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007854:	4323      	orrs	r3, r4
 8007856:	d03b      	beq.n	80078d0 <scalbn+0x90>
 8007858:	4b31      	ldr	r3, [pc, #196]	; (8007920 <scalbn+0xe0>)
 800785a:	4629      	mov	r1, r5
 800785c:	2200      	movs	r2, #0
 800785e:	ee10 0a10 	vmov	r0, s0
 8007862:	f7f8 fe7f 	bl	8000564 <__aeabi_dmul>
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <scalbn+0xe4>)
 8007868:	429e      	cmp	r6, r3
 800786a:	4604      	mov	r4, r0
 800786c:	460d      	mov	r5, r1
 800786e:	da12      	bge.n	8007896 <scalbn+0x56>
 8007870:	a327      	add	r3, pc, #156	; (adr r3, 8007910 <scalbn+0xd0>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fe75 	bl	8000564 <__aeabi_dmul>
 800787a:	e009      	b.n	8007890 <scalbn+0x50>
 800787c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007880:	428a      	cmp	r2, r1
 8007882:	d10c      	bne.n	800789e <scalbn+0x5e>
 8007884:	ee10 2a10 	vmov	r2, s0
 8007888:	4620      	mov	r0, r4
 800788a:	4629      	mov	r1, r5
 800788c:	f7f8 fcb4 	bl	80001f8 <__adddf3>
 8007890:	4604      	mov	r4, r0
 8007892:	460d      	mov	r5, r1
 8007894:	e01c      	b.n	80078d0 <scalbn+0x90>
 8007896:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800789a:	460b      	mov	r3, r1
 800789c:	3a36      	subs	r2, #54	; 0x36
 800789e:	4432      	add	r2, r6
 80078a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80078a4:	428a      	cmp	r2, r1
 80078a6:	dd0b      	ble.n	80078c0 <scalbn+0x80>
 80078a8:	ec45 4b11 	vmov	d1, r4, r5
 80078ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007918 <scalbn+0xd8>
 80078b0:	f000 f83c 	bl	800792c <copysign>
 80078b4:	a318      	add	r3, pc, #96	; (adr r3, 8007918 <scalbn+0xd8>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	ec51 0b10 	vmov	r0, r1, d0
 80078be:	e7da      	b.n	8007876 <scalbn+0x36>
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	dd08      	ble.n	80078d6 <scalbn+0x96>
 80078c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80078c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80078d0:	ec45 4b10 	vmov	d0, r4, r5
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
 80078d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80078da:	da0d      	bge.n	80078f8 <scalbn+0xb8>
 80078dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80078e0:	429e      	cmp	r6, r3
 80078e2:	ec45 4b11 	vmov	d1, r4, r5
 80078e6:	dce1      	bgt.n	80078ac <scalbn+0x6c>
 80078e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007910 <scalbn+0xd0>
 80078ec:	f000 f81e 	bl	800792c <copysign>
 80078f0:	a307      	add	r3, pc, #28	; (adr r3, 8007910 <scalbn+0xd0>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	e7e0      	b.n	80078ba <scalbn+0x7a>
 80078f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80078fc:	3236      	adds	r2, #54	; 0x36
 80078fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007902:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	2200      	movs	r2, #0
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <scalbn+0xe8>)
 800790e:	e7b2      	b.n	8007876 <scalbn+0x36>
 8007910:	c2f8f359 	.word	0xc2f8f359
 8007914:	01a56e1f 	.word	0x01a56e1f
 8007918:	8800759c 	.word	0x8800759c
 800791c:	7e37e43c 	.word	0x7e37e43c
 8007920:	43500000 	.word	0x43500000
 8007924:	ffff3cb0 	.word	0xffff3cb0
 8007928:	3c900000 	.word	0x3c900000

0800792c <copysign>:
 800792c:	ec51 0b10 	vmov	r0, r1, d0
 8007930:	ee11 0a90 	vmov	r0, s3
 8007934:	ee10 2a10 	vmov	r2, s0
 8007938:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800793c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007940:	ea41 0300 	orr.w	r3, r1, r0
 8007944:	ec43 2b10 	vmov	d0, r2, r3
 8007948:	4770      	bx	lr
	...

0800794c <_init>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr

08007958 <_fini>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	bf00      	nop
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr
