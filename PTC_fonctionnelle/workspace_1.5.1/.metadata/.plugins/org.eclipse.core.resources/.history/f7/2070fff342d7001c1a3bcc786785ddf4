/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* USER CODE BEGIN PV */
#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA
#define ECHO_PIN GPIO_PIN_8
#define ECHO_PORT GPIOA
uint32_t pMillis;
uint32_t Value1 = 0;
uint32_t Value2 = 0;
volatile uint32_t toneVal = 0;

uint16_t Distance  = 0;  // cm
uint16_t somme = 0;

uint8_t Receive_IHM[20];
uint8_t Receive_reel[20];
uint8_t Receive_IHM2[5];
uint8_t Receive_reel2[20];

int regard_droite;
int regard_gauche;
uint16_t Distance_obstacle_gauche  = 0;
uint16_t Distance_obstacle_droite  = 0;


int taille;
int test;
int i=0;
int servo=0;
int detect=0;
int obstacle_detecte=0;



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART4_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
static void MX_UART5_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
	int i=0;
	for (i=0; i<len; i++){
		ITM_SendChar((*ptr++));}
	return len;

}

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{

	if (GPIO_Pin == GPIO_PIN_8){
		if((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN))){

			Value1 = __HAL_TIM_GET_COUNTER (&htim1);
		}
		if (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN))){
			Value2 = __HAL_TIM_GET_COUNTER (&htim1);

			Distance = (Value2-Value1)* 0.034/2;

			if (detect == 0){
			detect = 1;
			}
		}
	}
}

void slice_str(const char * str, char * buffer, size_t start, size_t end)
{
    size_t j = 0;
    for ( size_t i = start; i <= end; ++i ) {
        buffer[j++] = str[i];
    }
    buffer[j] = 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if (obstacle_detecte == 0){

		if (strlen((char *)Receive_IHM2)!=0){
			if (strcmp((char *) Receive_IHM,"s")==0){
						strcpy((char *)Receive_reel,"stop\r");
				}
			if (strncmp((char *) Receive_IHM2,"F @",1)==0){
						strcpy((char *)Receive_reel2,"mogo 1:5 2:5\r");
					}
			if (strncmp((char *) Receive_IHM2,"S @",1)==0){
						strcpy((char *)Receive_reel2,"stop\r");
					}
			if (strncmp((char *) Receive_IHM2,"R @",1)==0){
						strcpy((char *)Receive_reel2,"mogo 1:10 2:0\r");
					}
			if (strncmp((char *) Receive_IHM2,"L @",1)==0){
						strcpy((char *)Receive_reel2,"mogo 2:10 1:0\r");
					}
			else {


			}

			HAL_UART_Transmit(&huart4,Receive_reel2,strlen((char *)Receive_reel2),100);// Sending in normal mode
			HAL_UART_Receive_IT(&huart5, Receive_IHM2, 8);// Sending in normal mode
		}

		if (strlen((char *)Receive_IHM)!=0){
			uint8_t resTransmit[20] = "no response";
			if (strncmp((char *) Receive_IHM,"rayon#@",6)==0){
				char param[8];
				slice_str(Receive_IHM, param, 7, strlen(Receive_IHM));

			strcpy((char *)Receive_reel,(char *)param);
			}
			else {


			}

			if (strcmp((char *) Receive_IHM2,"S")==0){
				strcpy((char *)Receive_reel2,"stop\r");
			}
			HAL_UART_Transmit(&huart4,Receive_IHM,strlen((char *)resTransmit),100);// Sending in normal mode
			HAL_UART_Receive_IT(&huart4, Receive_IHM, 20);// Sending in normal mode
		}
	}
	if (obstacle_detecte==2){
		if (strcmp((char *) Receive_IHM2,"S")==0){
			strcpy((char *)Receive_reel2,"mogo 1:10 2:-10\r");
		}
		obstacle_detecte = 0 ;
		HAL_UART_Transmit(&huart4,Receive_reel2,strlen((char *)Receive_reel2),100);// Sending in normal mode
		HAL_UART_Receive_IT(&huart5, Receive_IHM2, 8);// Sending in normal mode
	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

}

void alarme(void){

	for (float i=0.000; i<=100; i+=0.03) {
		 toneVal = (uint32_t) (999 + ( 60 * sin (0.3 * i)));
		 htim3.Instance->CCR1 = toneVal;
		 HAL_Delay(1);
	 }
	htim3.Instance->CCR1 =0;

}

void servomoteur(void){



		htim2.Instance->CCR1=500;
		HAL_Delay(1000);
		/*appelle fonction distance pour calculer la distance*/
		Distance_obstacle_gauche=Distance;

		/*htim2.Instance->CCR1=1500;
		HAL_Delay(2000);*/
		htim2.Instance->CCR1=2500;
		HAL_Delay(1000);
		/*appelle fonction distance pour calculer la distance*/
		Distance_obstacle_droite=Distance;

}

void commande_roue(int Radio){
	int avant=strcmp((char*)Radio,"avant\r");
	int droite=strcmp((char*)Radio,"droite\r");
	int gauche=strcmp((char*)Radio,"gauche\r");
	if (avant == 0) {
		uint8_t Test[] = "mogo 1:10 2:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,Test,strlen((char *)Test),100);// Sending in normal mode
	}
	if (droite == 0) {
			uint8_t Test[] = "mogo 1:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,Test,strlen((char *)Test),100);// Sending in normal mode
		}
	if (gauche == 0) {
			uint8_t Test[] = "mogo 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,Test,strlen((char *)Test),100);// Sending in normal mode
		}

}

void contournement(void){

	if (Distance_obstacle_gauche < Distance_obstacle_droite ){
		uint8_t rotation_G[] = "digo 2:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_G,strlen((char *)rotation_G),500);// Sending in normal mode


		htim2.Instance->CCR1=500;
		HAL_Delay(3000);

		while (Distance<35){
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
		}
		HAL_Delay(100);
		uint8_t test2[] = "stop\r"; //Data to send
		HAL_UART_Transmit(&huart4,test2,strlen((char *)test2),100);// Sending in normal mode
		HAL_Delay(100);

		uint8_t rotation_d[] = "digo 1:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_d,strlen((char *)rotation_d),100);// Sending in normal mode
		HAL_Delay(3000);
		uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
		HAL_Delay(1000);


		while (Distance<35){
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
		}
		HAL_Delay(100);

		uint8_t test3[] = "stop\r"; //Data to send
		HAL_UART_Transmit(&huart4,test3,strlen((char *)test3),100);// Sending in normal mode
		HAL_Delay(100);

		uint8_t rotation_d2[] = "digo 1:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_d2,strlen((char *)rotation_d2),100);// Sending in normal mode
		HAL_Delay(3000);
		uint8_t tout_droit2[] = "mogo 1:10 2:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,tout_droit2,strlen((char *)tout_droit2),100);// Sending in normal mode
		HAL_Delay(2000);

		while (Distance<35){
			uint8_t tout_droit2[] = "mogo 1:10 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,tout_droit2,strlen((char *)tout_droit2),100);// Sending in normal mode
		}
		HAL_Delay(100);

		uint8_t test[] = "stop\r"; //Data to send
		HAL_UART_Transmit(&huart4,test,strlen((char *)test),100);// Sending in normal mode
		HAL_Delay(100);
		htim2.Instance->CCR1=1500;
		obstacle_detecte=2;
		uint8_t rotation_d5[] = "digo 2:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_d5,strlen((char *)rotation_d5),100);// Sending in normal mode
		HAL_Delay(3000);

		return ;


	}
	if (Distance_obstacle_droite < Distance_obstacle_gauche ){
		uint8_t rotation_G[] = "digo 1:1000:10\r"; //Data to send
				HAL_UART_Transmit(&huart4,rotation_G,strlen((char *)rotation_G),500);// Sending in normal mode


				htim2.Instance->CCR1=500;
				HAL_Delay(3000);
		while (Distance<35){
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
		}

		HAL_Delay(100);
		uint8_t test4[] = "stop\r"; //Data to send
		HAL_UART_Transmit(&huart4,test4,strlen((char *)test4),100);// Sending in normal mode
		HAL_Delay(100);

		uint8_t rotation_d[] = "digo 2:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_d,strlen((char *)rotation_d),100);// Sending in normal mode
		HAL_Delay(3000);
		uint8_t tout_droit1[] = "mogo 1:10 2:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,tout_droit1,strlen((char *)tout_droit1),100);// Sending in normal mode
		HAL_Delay(1000);

		while (Distance<35){
			uint8_t tout_droit[] = "mogo 1:10 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,tout_droit,strlen((char *)tout_droit),100);// Sending in normal mode
		}
		HAL_Delay(100);
		uint8_t test5[] = "stop\r"; //Data to send
		HAL_UART_Transmit(&huart4,test5,strlen((char *)test5),100);// Sending in normal mode
		HAL_Delay(100);

		uint8_t rotation_d2[] = "digo 2:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_d2,strlen((char *)rotation_d2),100);// Sending in normal mode
		HAL_Delay(3000);
		uint8_t tout_droit3[] = "mogo 1:10 2:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,tout_droit3,strlen((char *)tout_droit3),100);// Sending in normal mode
		HAL_Delay(2000);

		while (Distance<35){
			uint8_t tout_droit2[] = "mogo 1:10 2:10\r"; //Data to send
			HAL_UART_Transmit(&huart4,tout_droit2,strlen((char *)tout_droit2),100);// Sending in normal mode
		}
		HAL_Delay(100);

		uint8_t test6[] = "stop\r"; //Data to send
		HAL_UART_Transmit(&huart4,test6,strlen((char *)test6),100);// Sending in normal mode
		HAL_Delay(100);
		htim2.Instance->CCR1=1500;

		obstacle_detecte=2;
		uint8_t rotation_d4[] = "digo 1:1000:10\r"; //Data to send
		HAL_UART_Transmit(&huart4,rotation_d4,strlen((char *)rotation_d4),100);// Sending in normal mode
		HAL_Delay(3000);
		return ;
	}
}

int capteur_US(void){
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);

	Distance = (Value2-Value1)* 0.034/2;
	HAL_Delay(100);

	return(Distance);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_UART4_Init();
  MX_TIM2_Init();
  MX_TIM1_Init();
  MX_UART5_Init();
  MX_TIM4_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  HAL_TIM_Base_Start(&htim1);

  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
  HAL_TIM_Base_Start_IT(&htim4);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart4, Receive_IHM, 20);
  HAL_UART_Receive_IT(&huart5, Receive_IHM2, 8);
 /* htim2.Instance->CCR1=1500;*/


   while (1)
	  {


	 /*  HAL_Delay(500);*/

if (Distance <35){
	//obstacle_detecte = 1;
	HAL_Delay(100);
	uint8_t Test[] = "stop\r"; //Data to send
	HAL_UART_Transmit(&huart4,Test,strlen((char *)Test),100);// Sending in normal mode
	HAL_Delay(100);
	alarme();
	//obstacle_detecte = 0;
   if ((Distance <35) && (detect == 1)){
	   	//   obstacle_detecte = 1;
		    detect = 2;
			servomoteur();
			contournement();
	   }
}



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
}
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 72-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 72-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 19200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
